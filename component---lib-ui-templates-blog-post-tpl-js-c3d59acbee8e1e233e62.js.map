{"version":3,"sources":["webpack:///./lib/ui/templates/BlogPostTpl.js"],"names":["BlogPostTpl","props","readingTime","Math","random","window","tick","bind","setInterval","state","this","setState","prevState","render","blogPost","data","markdownRemark","frontmatter","html","cover","date","title","className","toFixed","style","marginLeft","marginRight","maxWidth","fluid","childImageSharp","alt","space","dangerouslySetInnerHTML","__html","Component","pageQuery"],"mappings":"0QAQqBA,E,oBACnB,WAAYC,GAAQ,IAAD,EACjB,cAAMA,IAAN,KACA,IAAMC,EAA8B,IAAhBC,KAAKC,SAFR,MAGK,oBAAXC,SACT,EAAKC,KAAO,EAAKA,KAAKC,K,yHAAV,KACZC,YAAY,EAAKF,KAAM,MAEzB,EAAKG,MAAQ,CACXP,eARe,E,kHAYnBI,KAAA,WACEI,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BV,YAAaU,EAAUV,YAA8B,GAAhBC,KAAKC,SAAgB,O,EAI9DS,OAAA,WACE,IAAMC,EAAWJ,KAAKT,MAAMc,KAAKC,eACzBC,EAAsBH,EAAtBG,YAAaC,EAASJ,EAATI,KACbC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MACrB,OACE,oCACE,kBAAC,IAAD,iBAAYX,KAAKT,MAAjB,CAAwBoB,MAAOA,KAC/B,kBAAC,IAAWX,KAAKT,MACf,kBAAC,IAAD,KACE,0BAAMqB,UAAU,SAAhB,iBACiBZ,KAAKD,MAAMP,YAAYqB,QAAQ,GADhD,YAGA,wBAAID,UAAU,QAAQD,GACtB,0BAAMC,UAAU,SAASF,IAE3B,kBAAC,IAAD,CACEI,MAAO,CACLC,WAAY,OACZC,YAAa,OACbC,SAAU,UAGXR,EACC,kBAAC,IAAD,CAAKS,MAAOT,EAAMU,gBAAgBD,MAAOE,IAAKT,IAC5C,KACJ,kBAAC,IAAD,CAAMU,MAAM,KACV,kBAAC,IAAD,CAAMC,wBAAyB,CAAEC,OAAQf,U,GA7CdgB,aA4D5BC,EAAS","file":"component---lib-ui-templates-blog-post-tpl-js-c3d59acbee8e1e233e62.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Tile } from \"ui/components\";\n\nexport default class BlogPostTpl extends Component {\n  constructor(props) {\n    super(props);\n    const readingTime = Math.random() * 300;\n    if (typeof window !== \"undefined\") {\n      this.tick = this.tick.bind(this);\n      setInterval(this.tick, 3000);\n    }\n    this.state = {\n      readingTime\n    };\n  }\n\n  tick() {\n    this.setState(prevState => ({\n      readingTime: prevState.readingTime + Math.random() * 15 - 4\n    }));\n  }\n\n  render() {\n    const blogPost = this.props.data.markdownRemark;\n    const { frontmatter, html } = blogPost;\n    const { cover, date, title } = frontmatter;\n    return (\n      <>\n        <Helmet {...this.props} title={title} />\n        <Layout {...this.props}>\n          <Header>\n            <span className=\"small\">\n              Reading Time: {this.state.readingTime.toFixed(2)} seconds\n            </span>\n            <h1 className=\"hero\">{title}</h1>\n            <span className=\"small\">{date}</span>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            {cover ? (\n              <Img fluid={cover.childImageSharp.fluid} alt={title} />\n            ) : null}\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogPostTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogPostsByUID($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        cover {\n          childImageSharp {\n            fluid(\n              maxWidth: 800\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}