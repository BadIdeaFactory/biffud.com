{"version":3,"file":"component---src-pages-playground-js-5ed0901950a222cd4540.js","mappings":"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","sources":["webpack://biffud.com/./lib/ui/templates/AboutTpl.js","webpack://biffud.com/./lib/ui/templates/BlogListingTpl.js","webpack://biffud.com/./lib/ui/templates/BlogPostTpl.js","webpack://biffud.com/./lib/ui/templates/ContactTpl.js","webpack://biffud.com/./lib/ui/templates/EmojiTpl.js","webpack://biffud.com/./lib/ui/templates/FAQListingTpl.js","webpack://biffud.com/./lib/ui/templates/ofHome/Section.js","webpack://biffud.com/./lib/ui/templates/ofHome/Clients.js","webpack://biffud.com/./lib/ui/templates/ofHome/Projects.js","webpack://biffud.com/./lib/ui/templates/ofHome/Services.js","webpack://biffud.com/./lib/ui/templates/ofHome/Testimonials.js","webpack://biffud.com/./lib/ui/templates/HomeTpl.js","webpack://biffud.com/./lib/ui/templates/LandingTpl.js","webpack://biffud.com/./lib/ui/templates/MediaTpl.js","webpack://biffud.com/./lib/ui/templates/ofPeople/Person.js","webpack://biffud.com/./lib/ui/templates/ofPeople/PersonModal.js","webpack://biffud.com/./lib/ui/templates/PeopleTpl.js","webpack://biffud.com/./lib/ui/templates/ProjectItemTpl.js","webpack://biffud.com/./lib/ui/templates/ProjectListingTpl.js","webpack://biffud.com/./lib/ui/templates/Playground.js","webpack://biffud.com/./src/pages/playground.js"],"sourcesContent":["import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { Copy, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\n\nexport default class AboutTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter, html } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nAboutTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query AboutTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n  }\n`;\n","import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst PostList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Post = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst PostCover = styled.div`\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  ${setSpace(\"mbm\")};\n`;\n\nconst PostHd = styled.div`\n  ${setSpace(\"mbs\")};\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst PostBd = styled.div`\n  ${setSpace(\"mbm\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst PostFt = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    ${setType(\"s\")};\n    color: ${({ theme }) => theme.color};\n  }\n`;\n\nexport default class BlogListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { posts } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PostList>\n              {posts.edges.map(({ node }) => {\n                const { timeToRead } = node;\n                const { cover, date, summary, title, uid } = node.frontmatter;\n                return (\n                  <Post key={uid} as=\"li\">\n                    <Tile to={`/tldr/${uid}`} as={Link}>\n                      {cover ? (\n                        <PostCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </PostCover>\n                      ) : null}\n                      <PostHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read more…\" />\n                        </span>\n                      </PostHd>\n                      <PostBd>\n                        <p className=\"summary\">{summary}</p>\n                      </PostBd>\n                      <PostFt>\n                        <span>{date}</span>\n                        <span>{timeToRead} min read</span>\n                      </PostFt>\n                    </Tile>\n                  </Post>\n                );\n              })}\n            </PostList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    posts: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/tldr/.*post.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            uid\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            date(formatString: \"MMMM D, YYYY\")\n            summary\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Tile } from \"ui/components\";\n\nexport default class BlogPostTpl extends Component {\n  constructor(props) {\n    super(props);\n    const readingTime = Math.random() * 300;\n    if (typeof window !== \"undefined\") {\n      this.tick = this.tick.bind(this);\n      //setInterval(this.tick, 3000);\n      // Note the above line was removed because it was causing\n      // the page to flash every 3 seconds.\n      // See https://github.com/BadIdeaFactory/biffud.com/issues/99\n      // for further details.\n    }\n    this.state = {\n      readingTime\n    };\n  }\n\n  tick() {\n    this.setState(prevState => ({\n      readingTime: prevState.readingTime + Math.random() * 15 - 4\n    }));\n  }\n\n  render() {\n    const blogPost = this.props.data.markdownRemark;\n    const { frontmatter, html } = blogPost;\n    const { cover, date, title } = frontmatter;\n    return (\n      <>\n        <Helmet {...this.props} title={title} />\n        <Layout {...this.props}>\n          <Header>\n            <span className=\"small\">\n              Reading Time: {this.state.readingTime.toFixed(2)} seconds\n            </span>\n            <h1 className=\"hero\">{title}</h1>\n            <span className=\"small\">{date}</span>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            {cover ? (\n              <Img fluid={cover.childImageSharp.fluid} alt={title} />\n            ) : null}\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogPostTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogPostsByUID($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        cover {\n          childImageSharp {\n            fluid(\n              maxWidth: 800\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Action, Icon, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace } from \"ui/mixins\";\n\nconst ContactHolder = styled(Tile)`\n  ${setSpace(\"pah\")};\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  text-align: center;\n`;\nconst Social = styled.ul`\n  ${setSpace(\"mtl\")};\n  text-align: left;\n`;\n\nconst SocialItem = styled.li`\n  ${setSpace(\"mts\")};\n  i {\n    ${setSpace(\"mrs\")};\n  }\n`;\n\nexport default class ContactTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    const {\n      email,\n      facebookid,\n      linkedinid,\n      twitterid,\n      myspaceid,\n      githubid\n    } = frontmatter;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Body>\n            <Header>\n              <h1 className=\"hero\">{frontmatter.heading}</h1>\n              <p className=\"para\">{frontmatter.subheading}</p>\n            </Header>\n            <ContactHolder>\n              <Action button obfuscated email={email} />\n              <Social>\n                {twitterid ? (\n                  <SocialItem>\n                    <Action href={`https://twitter.com/${twitterid}`}>\n                      <Icon name=\"twitter\" size=\"s\" />\n                      {twitterid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {githubid ? (\n                  <SocialItem>\n                    <Action href={`https://github.com/${githubid}`} size=\"s\">\n                      <Icon name=\"github\" />\n                      {githubid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {linkedinid ? (\n                  <SocialItem>\n                    <Action\n                      href={`https://linkedin.com/${linkedinid}`}\n                      size=\"s\"\n                    >\n                      <Icon name=\"linkedin\" />\n                      {linkedinid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {myspaceid ? (\n                  <SocialItem>\n                    <Action href={`https://myspace.com/${myspaceid}`} size=\"s\">\n                      <Icon name=\"myspace\" />\n                      {myspaceid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {facebookid ? (\n                  <SocialItem>\n                    <Action\n                      href={`https://facebook.com/${facebookid}`}\n                      size=\"s\"\n                    >\n                      <Icon name=\"facebook\" />\n                      {facebookid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n              </Social>\n            </ContactHolder>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nContactTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query ContactTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        email\n        facebookid\n        twitterid\n        githubid\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace } from \"ui/mixins\";\n\nconst EmojiHolder = styled(Tile)`\n  ${setSpace(\"pak\")};\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  text-align: center;\n  ${breakpoint.phone} {\n    ${setSpace(\"pvh\")};\n  }\n  i {\n    ${setSpace(\"mbl\")};\n    color: ${({ theme }) => theme.actionColor};\n    display: inline-block;\n    font-size: 240px;\n    height: 240px;\n    line-height: 240px;\n    width: 240px;\n    ${breakpoint.phone} {\n      font-size: 200px;\n      height: 200px;\n      line-height: 200px;\n      width: 200px;\n    }\n  }\n  h2 {\n    font-size: 36px;\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    ${breakpoint.phone} {\n      font-size: 26px;\n    }\n  }\n`;\n\nexport default class EmojiTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Body>\n            <Header>\n              <h1 className=\"hero\">{frontmatter.heading}</h1>\n              <p className=\"para\">{frontmatter.subheading}</p>\n            </Header>\n            <EmojiHolder>\n              <Icon name=\"thinking\" className=\"emoji\" />\n              <h2 className=\"name\">:thinkingface:</h2>\n            </EmojiHolder>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nEmojiTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query EmojiTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Tabs, Tab, Tile } from \"ui/components\";\nimport { setSpace } from \"ui/mixins\";\n\nconst Questions = styled(Tile)`\n  ${setSpace(\"pah\")};\n  display: ${({ isActive }) => (isActive ? \"block\" : \"none\")};\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 900px;\n`;\n\nexport default class FAQListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tab: \"partnership\"\n    };\n    this.switchTab = this.switchTab.bind(this);\n  }\n\n  switchTab(str) {\n    this.setState({ tab: str });\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    const membershipQuestions = this.props.data.membership.edges[0].node.html;\n    const partnershipQuestions = this.props.data.partnership.edges[0].node.html;\n    return (\n      <>\n        <Helmet {...this.props} title=\"Frequently Asked Questions\" />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            <Tabs count={2}>\n              <Tab\n                handleClick={() => this.switchTab(\"partnership\")}\n                isActive={this.state.tab === \"partnership\"}\n              >\n                {frontmatter.partnershipTab}\n              </Tab>\n              <Tab\n                handleClick={() => this.switchTab(\"membership\")}\n                isActive={this.state.tab === \"membership\"}\n              >\n                {frontmatter.membershipTab}\n              </Tab>\n            </Tabs>\n            <Questions isActive={this.state.tab === \"partnership\"} limit>\n              <Copy\n                dangerouslySetInnerHTML={{ __html: partnershipQuestions }}\n              />\n            </Questions>\n            <Questions isActive={this.state.tab === \"membership\"} limit>\n              <Copy dangerouslySetInnerHTML={{ __html: membershipQuestions }} />\n            </Questions>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nFAQListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    membership: object.isRequired,\n    partnership: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query FAQTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        membershipTab\n        partnershipTab\n      }\n    }\n    membership: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/question/membership/*/.*/*.md/\" }\n      }\n      sort: { order: ASC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n        }\n      }\n    }\n    partnership: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/question/partnership/*/.*/*.md/\" }\n      }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n        }\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nimport { setSpace } from \"ui/mixins\";\n\nconst Section = styled.div`\n  ${setSpace(\"mvk\")};\n  display: flex;\n  justify-content: center;\n  .el {\n    width: 100%;\n  }\n  &:not(:last-child) {\n    ${setSpace(\"pbk\")};\n  }\n`;\n\nexport default Section;\n","import { array, string } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Tile } from \"ui/components\";\nimport { Header } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    & > * {\n      grid-row-end: span 1;\n    }\n  }\n`;\nconst Item = styled.li`\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n`;\nconst ItemTitle = styled.h3`\n  ${setSpace(\"mbm\")};\n`;\nconst ItemText = styled.div`\n  color: ${({ theme }) => theme.color};\n  strong {\n    font-weight: 600;\n  }\n`;\n\nconst Clients = props => {\n  const { clients, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {clients.map(({ node }) => {\n            const client = node.frontmatter;\n            return (\n              <Item key={node.uid}>\n                <Tile href={client.link} target=\"_blank\" as=\"a\">\n                  <ItemTitle>\n                    <Img\n                      fixed={client.logo.childImageSharp.fixed}\n                      alt={client.name}\n                    />\n                  </ItemTitle>\n                  <ItemText dangerouslySetInnerHTML={{ __html: node.html }} />\n                </Tile>\n              </Item>\n            );\n          })}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nClients.propTypes = {\n  clients: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Clients;\n","import { array, string } from \"prop-types\";\nimport { Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { breakpoint } from \"ui/settings\";\nimport { Header } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport { Tile, Icon } from \"ui/components\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(214px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(291px, 1fr));\n  }\n`;\nconst Item = styled.li`\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n`;\nconst ItemImage = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  position: relative;\n  ${({ hasPlaceholder, theme }) =>\n    hasPlaceholder\n      ? `\n    .thinking {\n      color: ${theme.actionColor};\n      display: inline-block;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      i {\n        font-size: 80px !important;\n      }\n  `\n      : ``};\n`;\nconst ItemTitle = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h3,\n  span {\n    ${setType(\"m\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  h3 {\n    max-width: 75%;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\nconst ItemText = styled.p`\n  ${setSpace(\"mts\")};\n`;\n\nconst Projects = props => {\n  const { projects, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {projects.map(({ node }) => {\n            const project = node.frontmatter;\n            return (\n              <Item key={node.uid}>\n                <Tile as={Link} to={`/projects/${project.uid}`}>\n                  <ItemImage hasPlaceholder={!project.cover}>\n                    <Img\n                      fluid={\n                        project.cover\n                          ? project.cover.childImageSharp.fluid\n                          : props.placeholder\n                      }\n                      alt={project.title}\n                    />\n                    {!project.cover ? (\n                      <span className=\"thinking\">\n                        <Icon name=\"thinking\" />\n                      </span>\n                    ) : null}\n                  </ItemImage>\n                  <ItemTitle>\n                    <h3 className=\"title\">{project.title}</h3>\n                    <span>\n                      <Icon name=\"arrow-right\" text=\"Read more…\" />\n                    </span>\n                  </ItemTitle>\n                  <ItemText>{project.tagline}</ItemText>\n                </Tile>\n              </Item>\n            );\n          })}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nProjects.propTypes = {\n  projects: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Projects;\n","import { array, string } from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { breakpoint } from \"ui/settings\";\nimport { Header } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport { Tile } from \"ui/components\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 10px;\n    grid-template-columns: repeat(auto-fill, minmax(330px, 1fr));\n    & > * {\n      grid-row-end: span 1;\n    }\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(221px, 1fr));\n  }\n`;\nconst Item = styled.li`\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n`;\nconst ItemTitle = styled.h3`\n  ${setSpace(\"mbm\")};\n  ${setType(\"l\")};\n  font-weight: 800;\n`;\n\nconst Services = props => {\n  const { services, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {services.map((service, i) => (\n            <Item key={i}>\n              <Tile space=\"l\">\n                <ItemTitle className=\"TileTitle\">{service.title}</ItemTitle>\n                <p>{service.text}</p>\n              </Tile>\n            </Item>\n          ))}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nServices.propTypes = {\n  services: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Services;\n","import { array, string } from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Tile } from \"ui/components\";\nimport { Header } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    & > * {\n      grid-row-end: span 1;\n    }\n  }\n`;\nconst Item = styled.li`\n  height: 100%;\n  .quote {\n    ${setSpace(\"mbs\")};\n    ${setSpace(\"pal\")};\n    position: relative;\n    &:after,\n    &:before {\n      color: ${({ theme }) => theme.background};\n      ${setType(\"k\")};\n      position: absolute;\n    }\n    &:before {\n      content: \"“\";\n      top: 0;\n      left: 0;\n    }\n    &:after {\n      content: \"”\";\n      bottom: 0;\n      right: 0;\n    }\n  }\n  .source {\n    ${setType(\"s\")};\n    text-align: right;\n  }\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n  ${({ span }) =>\n    span\n      ? `\n    grid-column: 1 / span 2;\n    grid-row: 1 / 2;\n    justify-self: stretch;\n    align-self: stretch;\n  `\n      : ``};\n`;\n\nconst Testimonials = props => {\n  const { testimonials, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {testimonials.map((testimonial, i) => (\n            <Item key={i} span={testimonial.span}>\n              <Tile>\n                <blockquote className=\"quote\">\n                  <p>{testimonial.text}</p>\n                </blockquote>\n                <p className=\"source\">— {testimonial.source}</p>\n              </Tile>\n            </Item>\n          ))}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nTestimonials.propTypes = {\n  testimonials: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Testimonials;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { Action, Actionbar } from \"ui/components\";\nimport { Helmet, Layout, Pitch } from \"ui/partials\";\n\nimport Clients from \"./ofHome/Clients\";\nimport Projects from \"./ofHome/Projects\";\nimport Services from \"./ofHome/Services\";\nimport Testimonials from \"./ofHome/Testimonials\";\n\nexport default class HomeTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    const { clients, projects, defaultCover } = this.props.data;\n    const genericCover = defaultCover.edges[0].node.childImageSharp;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Pitch>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <Actionbar>\n              <Action button href=\"https://github.com/BadIdeaFactory/corporate/issues?q=is%3Aissue+is%3Aopen+label%3A%22project+application%22\" target=\"_blank\">\n                Submit an idea\n              </Action>\n              <Action href=\"https://patreon.com/biffud\" target=\"_blank\">Give us money</Action>\n              <span className=\"join\">or</span>\n              <Action to=\"contact\">Engage our services</Action>\n            </Actionbar>\n          </Pitch>\n          <Projects\n            placeholder={genericCover.fluid}\n            projects={projects.edges}\n            subtitle={frontmatter.projectsSubtitle}\n            title={frontmatter.projectsTitle}\n          />\n          <Clients\n            title={frontmatter.clientsTitle}\n            subtitle={frontmatter.clientsSubtitle}\n            clients={clients.edges}\n          />\n          <Services\n            title={frontmatter.servicesTitle}\n            subtitle={frontmatter.servicesSubtitle}\n            services={frontmatter.services}\n          />\n          <Services\n            title={frontmatter.goodatTitle}\n            subtitle={frontmatter.goodatSubtitle}\n            services={frontmatter.goodat}\n          />\n          <Testimonials\n            title={frontmatter.testimonialsTitle}\n            subtitle={frontmatter.testimonialsSubtitle}\n            testimonials={frontmatter.testimonials}\n          />\n        </Layout>\n      </>\n    );\n  }\n}\n\nHomeTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query HomeTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        contactCta\n        projectsCta\n        servicesTitle\n        servicesSubtitle\n        services {\n          title\n          text\n        }\n        testimonialsTitle\n        testimonialsSubtitle\n        testimonials {\n          text\n          source\n          span\n        }\n        goodatTitle\n        goodatSubtitle\n        goodat {\n          title\n          text\n        }\n        clientsSubtitle\n        clientsTitle\n        projectsSubtitle\n        projectsTitle\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 800\n              maxHeight: 600\n              quality: 90\n              cropFocus: CENTER\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    clients: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/clients/.*client.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            uid\n            name\n            score\n            link\n            logo {\n              childImageSharp {\n                fixed(\n                  height: 40\n                  quality: 80\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFixed_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/projects/.*project.md/\" } }\n      limit: 3\n      sort: {\n        order: DESC\n        fields: [frontmatter___feature, frontmatter___score, frontmatter___date]\n      }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            uid\n            title\n            active\n            feature\n            tagline\n            code\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 800\n                  cropFocus: CENTER\n                  maxHeight: 600\n                  quality: 90\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { Actionbar, Action, Copy, Tile } from \"ui/components\";\nimport { Body, Pitch, Helmet, Layout } from \"ui/partials\";\n\nexport default class LandingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter, html } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Pitch>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <Actionbar>\n              <Action button to=\"/projects\">\n                {frontmatter.projectsCta}\n              </Action>\n              <Action to=\"/contact\">{frontmatter.contactCta}</Action>\n            </Actionbar>\n          </Pitch>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nLandingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query LandingTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        contactCta\n        projectsCta\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Icon, Tile } from \"ui/components\";\n\nconst MentionsList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Mention = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n  ${({ highlight }) =>\n    highlight\n      ? `\n    grid-column: 1 / span 2;\n    grid-row: 1 / 2;\n    justify-self: stretch;\n    align-self: stretch;\n  `\n      : ``};\n`;\n\nconst MentionCover = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  display: block;\n`;\n\nconst MentionHd = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n`;\n\nconst MentionBd = styled.div`\n  ${setSpace(\"mts\")};\n  color: ${({ theme }) => theme.titleColor};\n  ${Copy} {\n    ${setSpace(\"mbs\")};\n  }\n`;\n\nexport default class MediaTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { mentions } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <MentionsList>\n              {mentions.edges.map(({ node }) => {\n                const { html } = node;\n                const {\n                  cover,\n                  publication,\n                  source,\n                  highlight,\n                  title\n                } = node.frontmatter;\n                return (\n                  <Mention as=\"li\" highlight={highlight}>\n                    <Tile href={source} target=\"_blank\" as=\"a\">\n                      {cover ? (\n                        <MentionCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </MentionCover>\n                      ) : null}\n                      <MentionHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"popout\" text=\"Read the article…\" />\n                        </span>\n                      </MentionHd>\n                      <MentionBd>\n                        {html ? (\n                          <>\n                            <Copy dangerouslySetInnerHTML={{ __html: html }} />\n                          </>\n                        ) : null}\n                        <p>by {publication}</p>\n                      </MentionBd>\n                    </Tile>\n                  </Mention>\n                );\n              })}\n            </MentionsList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nMediaTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    mentions: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query MediaTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    mentions: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"//pages/fame/.*mention.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            date(formatString: \"MMMM YYYY\")\n            title\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            link\n            highlight\n            publication\n            source\n            uid\n          }\n        }\n      }\n    }\n  }\n`;\n","import { func, object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Action, Icon } from \"ui/components\";\nimport { breakpoint, time } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Person = styled.li`\n  align-items: center;\n  background: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  transition: box-shadow ${time.s}, transform ${time.s};\n  &:hover {\n    box-shadow: 6px 6px 0 0 ${({ theme }) => theme.actionDecor};\n    transform: translate(-1px, -1px);\n  }\n  ${breakpoint.tabletUp} {\n    ${setSpace(\"pan\")};\n    );\n  }\n`;\n\nconst PersonPic = styled.div`\n  background: ${({ theme, avatar }) => (avatar ? \"\" : theme.actionColor)};\n  border: 2px solid ${({ theme }) => theme.background};\n  flex: 0 0 ${100 / 3}%;\n`;\n\nconst PersonDetails = styled.div`\n  ${setSpace(\"phm\")};\n  ${setType(\"s\")};\n  ${breakpoint.phone} {\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n`;\n\nconst PersonName = styled.h3`\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.color};\n  span {\n    display: block;\n    &:first-child {\n      ${setType(\"m\")};\n      color: ${({ theme }) => theme.actionColor};\n      font-weight: 800;\n    }\n  }\n`;\n\nconst PersonLinks = styled.div`\n  ${setSpace(\"mts\")};\n  & > * {\n    ${setSpace(\"mrs\")};\n    line-height: 1em;\n  }\n  ${breakpoint.phone} {\n    display: none;\n  }\n`;\n\nconst Member = props => {\n  const { defaultAvatar } = props;\n  const { frontmatter } = props.data;\n  const { avatar, fname, github, lname, twitter } = frontmatter;\n  return (\n    <Person onClick={props.toggleModal} role=\"button\">\n      <PersonPic hasAvatar={avatar}>\n        <Img\n          fluid={avatar ? avatar.childImageSharp.fluid : defaultAvatar.fluid}\n        />\n      </PersonPic>\n      <PersonDetails>\n        <PersonName>\n          <span>{fname}</span> <span>{lname}</span>\n        </PersonName>\n        <PersonLinks>\n          {twitter ? (\n            <Action\n              onClick={e => e.stopPropagation()}\n              href={`https://twitter.com/${twitter}`}\n              rel=\"external\"\n              target=\"_blank noreferrer nofollow\"\n            >\n              <Icon name=\"twitter\" size=\"s\" />\n            </Action>\n          ) : null}\n          {github ? (\n            <Action\n              onClick={e => e.stopPropagation()}\n              href={`https://github.com/${github}`}\n              rel=\"external\"\n              target=\"_blank noreferrer nofollow\"\n            >\n              <Icon name=\"github\" size=\"s\" />\n            </Action>\n          ) : null}\n        </PersonLinks>\n      </PersonDetails>\n    </Person>\n  );\n};\n\nMember.propTypes = {\n  defaultAvatar: object.isRequired,\n  data: shape({\n    frontmatter: object.isRequired\n  }).isRequired,\n  toggleModal: func.isRequired\n};\n\nMember.defaultProps = {};\n\nexport default Member;\n","import { func, object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Action, Copy, Icon, Modal } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Person = styled.div`\n  ${setSpace(\"pbh\")};\n  ${breakpoint.tabletUp} {\n    display: flex;\n    flex-direction: row;\n  }\n`;\nconst PersonPic = styled.div`\n  background: ${({ hasAvatar, theme }) =>\n    !hasAvatar ? theme.actionColor : \"\"};\n  ${breakpoint.tabletUp} {\n    flex: 0 0 ${100 / 4}%;\n  }\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n    & > * {\n      margin-left: auto;\n      margin-right: auto;\n      max-width: 200px;\n    }\n  }\n`;\nconst PersonDetails = styled.div`\n  ${setType(\"s\")};\n  ${breakpoint.tabletUp} {\n    ${setSpace(\"pll\")};\n  }\n`;\nconst PersonName = styled.h2`\n  ${setType(\"l\")};\n  font-weight: 800;\n  color: ${({ theme }) => theme.titleColor};\n`;\nconst PersonBio = styled.div`\n  ${setSpace(\"mvm\")};\n  ${setType(\"m\")};\n  color: ${({ theme }) => theme.titleColor};\n`;\nconst PersonQuote = styled.div`\n  ${setSpace(\"mvm\")};\n`;\nconst PersonSocial = styled.div`\n  & > *:not(:first-child) {\n    ${setSpace(\"mlm\")};\n  }\n  & > *:not(:last-child) {\n    ${setSpace(\"mrm\")};\n  }\n`;\n\nconst Member = props => {\n  const { defaultAvatar } = props;\n  const { frontmatter, html } = props.data;\n  const { avatar, fname, github, lname, quote, twitter } = frontmatter;\n  return (\n    <Modal toggleModal={props.toggleModal}>\n      <Person>\n        <PersonPic hasAvatar={avatar}>\n          <Img\n            fluid={avatar ? avatar.childImageSharp.fluid : defaultAvatar.fluid}\n          />\n        </PersonPic>\n        <PersonDetails>\n          <PersonName>\n            {fname} {lname}\n          </PersonName>\n          <PersonBio>\n            <Copy dangerouslySetInnerHTML={{ __html: html }} />\n          </PersonBio>\n          <PersonQuote>{quote}</PersonQuote>\n          <PersonSocial>\n            <Action href={`https://github.com/${github}`} target=\"_blank\">\n              <Icon name=\"github\" /> GitHub\n            </Action>\n            <Action href={`https://twitter.com/${twitter}`} target=\"_blank\">\n              <Icon name=\"twitter\" /> Twitter\n            </Action>\n          </PersonSocial>\n        </PersonDetails>\n      </Person>\n    </Modal>\n  );\n};\n\nMember.propTypes = {\n  defaultAvatar: object.isRequired,\n  data: shape({\n    frontmatter: object.isRequired\n  }).isRequired,\n  toggleModal: func.isRequired\n};\n\nMember.defaultProps = {};\n\nexport default Member;\n","import { object, shape } from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { breakpoint, time, track } from \"ui/settings\";\nimport { fadeIn } from \"ui/animations\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport Person from \"./ofPeople/Person\";\nimport PersonModal from \"./ofPeople/PersonModal\";\n\nconst PeopleSection = styled.section`\n  ${setSpace(\"mbk\")};\n`;\n\nconst People = styled.ul`\n  animation: ${fadeIn} ${time.l} linear;\n  width: 100%;\n  display: grid;\n  grid-gap: 10px;\n  ${breakpoint.phone} {\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  }\n  ${breakpoint.tabletUp} {\n    grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  }\n`;\n\nconst PeopleIntro = styled.div`\n  ${setSpace(\"mbh\")};\n  text-align: center;\n  h2 {\n    ${setSpace(\"mbm\")};\n    ${setSpace(\"phs\")};\n    ${setSpace(\"pvx\")};\n    ${setType(\"s\")};\n    background: white;\n    color: ${({ theme }) => theme.actionColor};\n    display: inline-block;\n    font-weight: 800;\n    letter-spacing: ${track.m};\n    text-transform: uppercase;\n  }\n  p {\n    ${setType(\"l\")};\n    color: white;\n  }\n`;\n\nexport default class PeopleTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPerson: null\n    };\n    this.handleShowPerson = this.handleShowPerson.bind(this);\n  }\n\n  handleShowPerson(obj) {\n    this.setState(prevState => ({\n      currentPerson: prevState.currentPerson ? null : obj\n    }));\n  }\n\n  render() {\n    const { currentPerson } = this.state;\n    const { defaultAvatar, overlords, members, accomplices } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    const genericAvatar = defaultAvatar.edges[0].node.childImageSharp;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PeopleSection>\n              <PeopleIntro>\n                <h2>{frontmatter.overlordsHeading}</h2>\n                <p>{frontmatter.overlordsDescr}</p>\n              </PeopleIntro>\n              <People>\n                {overlords.edges.map(({ node }) => (\n                  <Person\n                    data={node}\n                    defaultAvatar={genericAvatar}\n                    key={node.frontmatter.uid}\n                    toggleModal={e => this.handleShowPerson(node, e)}\n                  />\n                ))}\n              </People>\n            </PeopleSection>\n            <PeopleIntro>\n              <h2>{frontmatter.membersHeading}</h2>\n              <p>{frontmatter.membersDescr}</p>\n            </PeopleIntro>\n            <PeopleSection>\n              <People>\n                {members.edges.map(({ node }) => (\n                  <Person\n                    data={node}\n                    defaultAvatar={genericAvatar}\n                    key={node.frontmatter.uid}\n                    toggleModal={e => this.handleShowPerson(node, e)}\n                  />\n                ))}\n              </People>\n            </PeopleSection>\n            <PeopleSection>\n              <PeopleIntro>\n                <h2>{frontmatter.accomplicesHeading}</h2>\n                <p>{frontmatter.accomplicesDescr}</p>\n              </PeopleIntro>\n              <People>\n                {accomplices.edges.map(({ node }) => (\n                  <Person\n                    data={node}\n                    defaultAvatar={genericAvatar}\n                    key={node.frontmatter.uid}\n                    toggleModal={e => this.handleShowPerson(node, e)}\n                  />\n                ))}\n              </People>\n            </PeopleSection>\n          </Body>\n          {currentPerson !== null ? (\n            <PersonModal\n              toggleModal={this.handleShowPerson}\n              data={currentPerson}\n              defaultAvatar={genericAvatar}\n            />\n          ) : null}\n        </Layout>\n      </>\n    );\n  }\n}\n\nPeopleTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    overlords: object.isRequired,\n    members: object.isRequired,\n    accomplices: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query PeopleTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        accomplicesHeading\n        accomplicesDescr\n        membersHeading\n        membersDescr\n        overlordsHeading\n        overlordsDescr\n      }\n    }\n    defaultAvatar: allFile(\n      filter: { relativePath: { eq: \"images/default-avatar.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 240\n              maxHeight: 300\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    overlords: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/people/bios/*/.*/*.md/\" }\n        frontmatter: { role: { elemMatch: { overlord: { eq: true } } } }\n      }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            fname\n            github\n            lname\n            quote\n            score\n            twitter\n            uid\n            avatar {\n              childImageSharp {\n                fluid(\n                  maxWidth: 240\n                  maxHeight: 300\n                  cropFocus: CENTER\n                  traceSVG: {\n                    color: \"#ffffff\"\n                    optTolerance: 0.1\n                    turdSize: 10\n                    turnPolicy: TURNPOLICY_MINORITY\n                  }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    members: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/people/bios/*/.*/*.md/\" }\n        frontmatter: { role: { elemMatch: { member: { eq: true } } } }\n      }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            fname\n            github\n            lname\n            quote\n            score\n            twitter\n            uid\n            avatar {\n              childImageSharp {\n                fluid(\n                  maxWidth: 240\n                  maxHeight: 300\n                  cropFocus: CENTER\n                  traceSVG: {\n                    color: \"#ffffff\"\n                    optTolerance: 0.1\n                    turdSize: 10\n                    turnPolicy: TURNPOLICY_MINORITY\n                  }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    accomplices: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/people/bios/*/.*/*.md/\" }\n        frontmatter: { role: { elemMatch: { accomplice: { eq: true } } } }\n      }\n      sort: { order: DESC, fields: [frontmatter___score, frontmatter___lname] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            fname\n            github\n            lname\n            quote\n            score\n            twitter\n            uid\n            avatar {\n              childImageSharp {\n                fluid(\n                  maxWidth: 240\n                  maxHeight: 300\n                  cropFocus: CENTER\n                  traceSVG: {\n                    color: \"#ffffff\"\n                    optTolerance: 0.1\n                    turdSize: 10\n                    turnPolicy: TURNPOLICY_MINORITY\n                  }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Actionbar, Action, Icon, Gallery, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Flex = styled.div`\n  ${breakpoint.tabletUp} {\n    display: flex;\n    & div.sideA,\n    & div.sideB {\n      flex: 0 0 50%;\n    }\n    & div.sideA {\n      ${setSpace(\"prl\")};\n    }\n    & div.sideB {\n      ${setSpace(\"pll\")};\n    }\n  }\n`;\n\nconst BodyHd = styled(Flex)`\n  ${setSpace(\"mbl\")};\n  ${breakpoint.tabletUp} {\n    display: flex;\n  }\n  & div.sideB {\n    display: flex;\n  }\n  & div.time,\n  & div.code {\n    flex: 0 0 50%;\n  }\n  ${breakpoint.phone} {\n    & div.sideB {\n      ${setSpace(\"mtl\")}\n    }\n  }\n`;\n\nconst BodyBd = styled(Flex)`\n  ${setSpace(\"mvl\")};\n  a {\n    color: ${({ theme }) => theme.actionColor};\n    text-decoration: underline;\n  }\n`;\n\nconst BodyFt = styled.div`\n  ${setSpace(\"mth\")};\n  ${setType(\"s\")};\n`;\n\nconst Label = styled.h2`\n  ${setSpace(\"mbs\")};\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.dimmedColor};\n`;\n\nconst Name = styled.p`\n  ${setType(\"h\")};\n  font-weight: 800;\n  color: ${({ theme }) => theme.titleColor};\n  text-transform: uppercase;\n`;\n\nconst Tagline = styled.p`\n  ${setSpace(\"mbl\")};\n  ${setType(\"l\")};\n  font-weight: 600;\n  color: ${({ theme }) => theme.titleColor};\n`;\n\nconst Description = styled.div`\n  color: ${({ theme }) => theme.titleColor};\n  p {\n    &:not(:last-child) {\n      ${setSpace(\"mbm\")};\n    }\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-weight: 800;\n  }\n  a {\n    color: ${({ theme }) => theme.actionColor};\n  }\n  em {\n    font-style: italic;\n  }\n  strong {\n    color: ${({ theme }) => theme.titleColor};\n    font-weight: 800;\n  }\n  ul,\n  ol {\n    ${setType(\"s\")};\n  }\n  ul li:before {\n    ${setSpace(\"mrs\")};\n    color: ${({ theme }) => theme.color};\n    content: \"–\";\n    display: inline-block;\n  }\n  ol li {\n    list-style: decimal;\n  }\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst Meta = styled.p`\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.titleColor};\n  font-weight: 800;\n  text-transform: uppercase;\n`;\n\nconst Awards = styled.div`\n  ${setSpace(\"mtl\")};\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.titleColor};\n  li:before {\n    ${setSpace(\"mrx\")};\n    color: ${({ theme }) => theme.dimmedColor};\n    content: \"—\";\n  }\n  strong {\n    font-weight: 600;\n  }\n  i {\n    color: ${({ theme }) => theme.dimmedColor};\n  }\n`;\n\nconst Lists = styled.div`\n  ${setSpace(\"mtl\")};\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  & > * {\n    flex: 0 0 50%;\n  }\n  li:before {\n    ${setSpace(\"mrx\")};\n    color: ${({ theme }) => theme.dimmedColor};\n    content: \"—\";\n  }\n  i {\n    color: ${({ theme }) => theme.dimmedColor};\n  }\n`;\n\nexport default class ProjectItemTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const portfolioItem = this.props.data.markdownRemark;\n    const genericCover = this.props.data.defaultCover.edges[0].node\n      .childImageSharp;\n    const { frontmatter, html } = portfolioItem;\n    const {\n      application,\n      awards,\n      bifpresents,\n      cover,\n      date,\n      slides,\n      link,\n      needs,\n      code,\n      source,\n      tagline,\n      timeframe,\n      title\n    } = frontmatter;\n\n    const displayGallery = () => {\n      const images = [];\n      if (cover) {\n        images.push(cover.childImageSharp.fluid);\n      }\n      if (slides) {\n        slides.forEach(slide => images.push(slide.childImageSharp.fluid));\n      }\n      return <Gallery images={images} defaultImage={genericCover.fluid} />;\n    };\n\n    return (\n      <>\n        <Helmet {...this.props} title={title} />\n        <Layout {...this.props}>\n          <Header>\n            <span className=\"small\">BIFFUD Presents</span>\n            <h1 className=\"hero\">{bifpresents}</h1>\n            <span className=\"small\">{date}</span>\n          </Header>\n          <Body>\n            <Tile space=\"h\">\n              <BodyHd>\n                <div className=\"sideA\">\n                  <div className=\"name\">\n                    <Label>Project name</Label>\n                    <Name>{title}</Name>\n                  </div>\n                </div>\n                <div className=\"sideB\">\n                  <div className=\"time\">\n                    <Label>Timeframe</Label>\n                    <Meta>{timeframe}</Meta>\n                  </div>\n                  <div className=\"code\">\n                    <Label>Code</Label>\n                    <Meta>{code}</Meta>\n                  </div>\n                </div>\n              </BodyHd>\n              <BodyBd>\n                <div className=\"sideA\">\n                  <Label>Tagline</Label>\n                  <Tagline>{tagline}</Tagline>\n                  <Label>Description</Label>\n                  <Description dangerouslySetInnerHTML={{ __html: html }} />\n                </div>\n                <div className=\"sideB\">\n                  <Label>Proofs of existence</Label>\n                  {displayGallery()}\n                  {awards && awards.length > 0 && (\n                    <Awards>\n                      <Label>Proofs of excellence</Label>\n                      <ul>\n                        {awards.map(({ name, url, description }, i) => {\n                          if (!name) return null\n                          const AwardName = url ? (\n                            <>\n                              <a href={url} target=\"_blank\">\n                                <strong>{name}</strong>\n                              </a>{\" \"}\n                              <Icon name=\"popout\" />\n                            </>\n                          ) : (\n                            <strong>{name}</strong>\n                          )\n\n                          return (\n                            <li key={`${name}_${i}`}>\n                              {AwardName}\n                              {description ? ` ${description}` : ''}\n                            </li>\n                          )\n                        })}\n                      </ul>\n                    </Awards>\n                  )}\n                  <Lists>\n                    {source || application ? (\n                      <div className=\"sideB\" style={{ padding: \"0\" }}>\n                        <Label>More proofs</Label>\n                        <ul>\n                          {source ? (\n                            <li>\n                              <a href={source} target=\"_blank\">\n                                Source code\n                              </a>{\" \"}\n                              <Icon name=\"popout\" />\n                            </li>\n                          ) : null}\n                          {application ? (\n                            <li>\n                              <a href={application} target=\"_blank\">\n                                BIFFUD Application\n                              </a>{\" \"}\n                              <Icon name=\"popout\" />\n                            </li>\n                          ) : null}\n                        </ul>\n                      </div>\n                    ) : null}\n                    {Object.keys(needs).length > 0 ? (\n                      <div className=\"sideB\" style={{ padding: \"0\" }}>\n                        <Label>Needs</Label>\n                        <ul>\n                          {Object.keys(needs).map(need => {\n                            const dict = {\n                              code: \"Code\",\n                              graphic: \"Graphic Design\",\n                              money: \"Money\",\n                              users: \"Users\",\n                              uxui: \"UX / UI Design\"\n                            };\n                            if (needs[need]) {\n                              return (\n                                <li key={needs[need]}>\n                                  {need !== \"other\" ? dict[need] : needs[need]}\n                                </li>\n                              );\n                            }\n                            return null;\n                          })}\n                        </ul>\n                      </div>\n                    ) : null}\n                  </Lists>\n                </div>\n              </BodyBd>\n              <BodyFt>\n                <Actionbar>\n                  {link ? (\n                    <div>\n                      <Action button primary href={link}>\n                        Launch project\n                      </Action>\n                    </div>\n                  ) : null}\n                  <div>\n                    <Action\n                      button={!link}\n                      href=\"https://patreon.com/biffud\"\n                      primary={!link}\n                      target=\"_blank\"\n                    >\n                      Donate to support\n                    </Action>\n                  </div>\n                </Actionbar>\n              </BodyFt>\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nProjectItemTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query PortfolioItemsByUID($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        active\n        application\n        slides {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n        bifpresents\n        date(formatString: \"MMM YYYY\")\n        link\n        code\n        source\n        tagline\n        timeframe\n        title\n        uid\n        awards {\n          name\n          url\n          description\n        }\n        needs {\n          code\n          graphic\n          money\n          uxui\n          users\n          other\n        }\n        cover {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Projects = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 40px;\n    grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\n  }\n`;\n\nconst Flag = styled.span`\n  ${setType(\"x\")};\n  ${setSpace(\"mlx\")};\n  color: ${({ theme }) => theme.dimmedColor};\n  font-weight: 800;\n  text-transform: uppercase;\n`;\n\nconst Project = styled.li`\n  grid-row-end: span 1;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n  ${breakpoint.tabletUp} {\n    &:nth-child(even) {\n      transform: translateY(30px);\n    }\n  }\n`;\n\nconst ProjectCover = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  position: relative;\n  ${({ hasPlaceholder, theme }) =>\n    hasPlaceholder\n      ? `\n  .thinking {\n    color: ${theme.actionColor};\n    display: inline-block;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    i {\n      font-size: 80px !important;\n    }\n  }`\n      : ``};\n`;\n\nconst ProjectHd = styled.div`\n  ${setSpace(\"mbm\")};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  span.code {\n    align-items: center;\n    color: ${({ theme }) => theme.titleColor};\n    display: flex;\n  }\n  span.date {\n    color: ${({ theme }) => theme.dimmedColor};\n  }\n`;\n\nconst ProjectBd = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  h2 {\n    max-width: 75%;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst ProjectFt = styled.div`\n  color: ${({ theme }) => theme.titleColor};\n  p.summary {\n    ${setSpace(\"mts\")};\n  }\n`;\n\nexport default class ProjectListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { defaultCover, projects, markdownRemark } = this.props.data;\n    const genericCover = defaultCover.edges[0].node.childImageSharp;\n    const { frontmatter } = markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <Projects>\n              {projects.edges.map(({ node }) => {\n                const {\n                  active,\n                  cover,\n                  date,\n                  code,\n                  tagline,\n                  title,\n                  uid\n                } = node.frontmatter;\n                return (\n                  <Project key={uid} as=\"li\">\n                    <Tile as={Link} to={`/projects/${uid}`}>\n                      <ProjectHd>\n                        <span className=\"code\">\n                          {code} {!active ? <Flag>(Hibernated)</Flag> : null}\n                        </span>\n                        <span className=\"date\">{date}</span>\n                      </ProjectHd>\n                      <ProjectCover hasPlaceholder={!cover}>\n                        <Img\n                          fluid={\n                            cover\n                              ? cover.childImageSharp.fluid\n                              : genericCover.fluid\n                          }\n                          alt={title}\n                        />\n\n                        {!cover ? (\n                          <span className=\"thinking\">\n                            <Icon name=\"thinking\" size=\"h\" />\n                          </span>\n                        ) : null}\n                      </ProjectCover>\n                      <ProjectBd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read more…\" />\n                        </span>\n                      </ProjectBd>\n                      <ProjectFt>\n                        <p className=\"summary\">{tagline}</p>\n                      </ProjectFt>\n                    </Tile>\n                  </Project>\n                );\n              })}\n            </Projects>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nProjectListingTpl.propTypes = {\n  data: shape({\n    projects: object.isRequired,\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query ProjectsTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/projects/.*project.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___score, frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            uid\n            date(formatString: \"MMM YYYY\")\n            title\n            active\n            tagline\n            code\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 600\n                  quality: 90\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { scatteredBif1, scatteredBif2, scatteredBif3 } from \"assets/images\";\nimport { color, font } from \"ui/settings\";\nimport { setType } from \"ui/mixins\";\n\nconst Sample = styled.div`\n  font-family: ${font.sans};\n  overflow: hidden;\n  position: relative;\n  h1,\n  p,\n  span {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 1000px;\n  }\n  .PlxEl {\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n  .PlxEl1 {\n    background-image: url(${scatteredBif1});\n  }\n  .PlxEl2 {\n    background-image: url(${scatteredBif2});\n  }\n  .PlxEl3 {\n    background-image: url(${scatteredBif3});\n  }\n  h1 {\n    ${setType(\"h\")};\n    font-weight: 800;\n    font-style: italic;\n  }\n  span {\n    position: relative;\n    z-index: 100;\n    ${setType(\"s\")};\n  }\n  p {\n    ${setType(\"m\")};\n  }\n`;\n\nexport default class Playground extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { hexArray } = color;\n    return (\n      <>\n        {hexArray.map((color, i) => (\n          <Sample\n            key={i}\n            style={{\n              background: color,\n              color: \"white\",\n              padding: \"100px\",\n              fontWeight: \"bold\"\n            }}\n          >\n            <div className=\"PlxEl PlxEl1\" />\n            <div className=\"PlxEl PlxEl2\" />\n            <div className=\"PlxEl PlxEl3\" />\n            <span>{color}</span>\n            <h1>\n              Bad Idea Factory is a collective of chaotic creatives using\n              technology to make people thinking face emoji. We have been\n              working in this space for hundreds of thousands of years.\n            </h1>\n            <p>\n              Bad Idea Factory is a collective of chaotic creatives using\n              technology to make people thinking face emoji. We have been\n              working in this space for hundreds of thousands of years.\n            </p>\n          </Sample>\n        ))}\n      </>\n    );\n  }\n}\n\nPlayground.propTypes = {};\n","import React from \"react\";\n\nimport { Playground } from \"ui/templates\";\n\nexport default props => <Playground {...props} />;\n"],"names":["AboutTpl","props","state","render","this","data","markdownRemark","frontmatter","html","title","className","heading","subheading","style","marginLeft","marginRight","maxWidth","space","dangerouslySetInnerHTML","__html","Component","PostList","styled","breakpoint","Post","Tile","setType","setSpace","PostCover","theme","actionColor","PostHd","PostBd","titleColor","PostFt","color","BlogListingTpl","posts","edges","map","node","timeToRead","cover","date","summary","uid","key","as","to","Link","fluid","childImageSharp","alt","name","text","BlogPostTpl","readingTime","Math","random","window","tick","bind","setState","prevState","blogPost","toFixed","ContactHolder","Social","SocialItem","ContactTpl","email","facebookid","linkedinid","twitterid","myspaceid","githubid","button","obfuscated","href","size","EmojiHolder","EmojiTpl","Questions","isActive","FAQListingTpl","tab","switchTab","str","membershipQuestions","membership","partnershipQuestions","partnership","count","handleClick","partnershipTab","membershipTab","limit","Element","Section","Title","Items","Item","ItemTitle","ItemText","clients","subtitle","client","link","target","fixed","logo","ItemImage","hasPlaceholder","projects","project","placeholder","tagline","services","service","i","background","span","testimonials","testimonial","source","HomeTpl","genericCover","defaultCover","projectsSubtitle","projectsTitle","clientsTitle","clientsSubtitle","servicesTitle","servicesSubtitle","goodatTitle","goodatSubtitle","goodat","testimonialsTitle","testimonialsSubtitle","LandingTpl","projectsCta","contactCta","MentionsList","Mention","highlight","MentionCover","MentionHd","MentionBd","Copy","MediaTpl","mentions","publication","Person","time","actionDecor","PersonPic","avatar","PersonDetails","PersonName","PersonLinks","Member","defaultAvatar","fname","github","lname","twitter","onClick","toggleModal","role","hasAvatar","e","stopPropagation","rel","defaultProps","PersonBio","PersonQuote","PersonSocial","quote","PeopleSection","People","fadeIn","PeopleIntro","track","PeopleTpl","currentPerson","handleShowPerson","obj","overlords","members","accomplices","genericAvatar","overlordsHeading","overlordsDescr","membersHeading","membersDescr","accomplicesHeading","accomplicesDescr","PersonModal","Flex","BodyHd","BodyBd","BodyFt","Label","dimmedColor","Name","Tagline","Description","Meta","Awards","Lists","ProjectItemTpl","images","portfolioItem","application","awards","bifpresents","slides","needs","code","timeframe","push","forEach","slide","defaultImage","length","url","description","AwardName","padding","Object","keys","need","graphic","money","users","uxui","primary","Projects","Flag","Project","ProjectCover","ProjectHd","ProjectBd","ProjectFt","ProjectListingTpl","active","Sample","font","scatteredBif1","scatteredBif2","scatteredBif3","Playground","hexArray","fontWeight"],"sourceRoot":""}