{"version":3,"file":"component---lib-ui-templates-blog-listing-tpl-js-0c5b57fde3eff9d967bf.js","mappings":"oPAWMA,EAAWC,EAAAA,QAAAA,GAAAA,WAAH,oEAAGA,CAAH,kIACVC,EAAAA,GAAAA,UASEC,GAAOF,EAAAA,EAAAA,SAAOG,EAAAA,IAAV,2EAAGH,CAAH,yDACNI,EAAAA,EAAAA,IAAQ,KAGRH,EAAAA,GAAAA,OACEI,EAAAA,EAAAA,IAAS,QAITC,EAAYN,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,+BACO,qBAAGO,MAAkBC,eACvCH,EAAAA,EAAAA,IAAS,QAGPI,EAAST,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,sKACRK,EAAAA,EAAAA,IAAS,QAMPD,EAAAA,EAAAA,IAAQ,MACD,qBAAGG,MAAkBC,cAM9BP,EAAAA,GAAAA,WAOES,EAASV,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,kFACRK,EAAAA,EAAAA,IAAS,QACF,qBAAGE,MAAkBI,cAM1BC,EAASZ,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,wFAKNI,EAAAA,EAAAA,IAAQ,MACD,qBAAGG,MAAkBM,SAIbC,EAAAA,SAAAA,GACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,GAFI,EAsDlB,OAvDkBF,EAAAA,EAAAA,GAAAA,EAAAA,GAIlB,YAEDG,OAAA,WACE,IAAQC,EAAUC,KAAKJ,MAAMK,KAArBF,MACAG,EAAgBF,KAAKJ,MAAMK,KAAKE,eAAhCD,YACR,OACE,gCACE,gBAAC,KAAD,iBAAYF,KAAKJ,MAAjB,CAAwBQ,MAAOF,EAAYE,SAC3C,gBAAC,KAAWJ,KAAKJ,MACf,gBAAC,KAAD,KACE,sBAAIS,UAAU,QAAQH,EAAYI,SAClC,qBAAGD,UAAU,QAAQH,EAAYK,aAEnC,gBAAC,KAAD,KACE,gBAAC3B,EAAD,KACGmB,EAAMS,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACVC,EAAeD,EAAfC,WACR,EAA6CD,EAAKR,YAA1CU,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,QAASV,EAA9B,EAA8BA,MAAOW,EAArC,EAAqCA,IACrC,OACE,gBAAChC,EAAD,CAAMiC,IAAKD,EAAKE,GAAG,MACjB,gBAAC,KAAD,CAAMC,GAAE,SAAWH,EAAOE,GAAIE,EAAAA,MAC3BP,EACC,gBAACzB,EAAD,KACE,gBAAC,IAAD,CACEiC,MAAOR,EAAMS,gBAAgBD,MAC7BE,IAAKlB,KAGP,KACJ,gBAACd,EAAD,KACE,sBAAIe,UAAU,SAASD,GACvB,4BACE,gBAAC,KAAD,CAAMmB,KAAK,cAAcC,KAAK,iBAGlC,gBAACjC,EAAD,KACE,qBAAGc,UAAU,WAAWS,IAE1B,gBAACrB,EAAD,KACE,4BAAOoB,GACP,4BAAOF,EAAP,wBAWrB,EAvDkBhB,CAAuB8B,EAAAA","sources":["webpack://biffud.com/./lib/ui/templates/BlogListingTpl.js"],"sourcesContent":["import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst PostList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Post = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst PostCover = styled.div`\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  ${setSpace(\"mbm\")};\n`;\n\nconst PostHd = styled.div`\n  ${setSpace(\"mbs\")};\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst PostBd = styled.div`\n  ${setSpace(\"mbm\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst PostFt = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    ${setType(\"s\")};\n    color: ${({ theme }) => theme.color};\n  }\n`;\n\nexport default class BlogListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { posts } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PostList>\n              {posts.edges.map(({ node }) => {\n                const { timeToRead } = node;\n                const { cover, date, summary, title, uid } = node.frontmatter;\n                return (\n                  <Post key={uid} as=\"li\">\n                    <Tile to={`/tldr/${uid}`} as={Link}>\n                      {cover ? (\n                        <PostCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </PostCover>\n                      ) : null}\n                      <PostHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read moreâ€¦\" />\n                        </span>\n                      </PostHd>\n                      <PostBd>\n                        <p className=\"summary\">{summary}</p>\n                      </PostBd>\n                      <PostFt>\n                        <span>{date}</span>\n                        <span>{timeToRead} min read</span>\n                      </PostFt>\n                    </Tile>\n                  </Post>\n                );\n              })}\n            </PostList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    posts: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/tldr/.*post.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            uid\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            date(formatString: \"MMMM D, YYYY\")\n            summary\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostList","styled","breakpoint","Post","Tile","setType","setSpace","PostCover","theme","actionColor","PostHd","PostBd","titleColor","PostFt","color","BlogListingTpl","props","state","render","posts","this","data","frontmatter","markdownRemark","title","className","heading","subheading","edges","map","node","timeToRead","cover","date","summary","uid","key","as","to","Link","fluid","childImageSharp","alt","name","text","Component"],"sourceRoot":""}