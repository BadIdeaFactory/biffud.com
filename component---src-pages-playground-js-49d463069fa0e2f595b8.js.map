{"version":3,"sources":["webpack:///./lib/ui/templates/AboutTpl.js","webpack:///./lib/ui/templates/ContactTpl.js","webpack:///./lib/ui/templates/Playground.js","webpack:///./src/pages/playground.js","webpack:///./lib/ui/templates/ofPeople/Person.js","webpack:///./lib/ui/templates/ofPeople/PersonModal.js","webpack:///./lib/ui/templates/PeopleTpl.js","webpack:///./lib/ui/templates/FAQListingTpl.js","webpack:///./lib/ui/templates/EmojiTpl.js","webpack:///./lib/ui/templates/BlogPostTpl.js","webpack:///./lib/ui/templates/ProjectListingTpl.js","webpack:///./lib/ui/templates/LandingTpl.js","webpack:///./lib/ui/templates/ofHome/Section.js","webpack:///./lib/ui/templates/ofHome/Clients.js","webpack:///./lib/ui/templates/ofHome/Projects.js","webpack:///./lib/ui/templates/ofHome/Services.js","webpack:///./lib/ui/templates/ofHome/Testimonials.js","webpack:///./lib/ui/templates/HomeTpl.js","webpack:///./lib/ui/templates/BlogListingTpl.js","webpack:///./lib/ui/templates/MediaTpl.js","webpack:///./lib/ui/templates/ProjectItemTpl.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.link.js"],"names":["AboutTpl","props","state","render","this","data","markdownRemark","frontmatter","html","title","className","heading","subheading","style","marginLeft","marginRight","maxWidth","space","dangerouslySetInnerHTML","__html","Component","pageQuery","ContactHolder","styled","Tile","setSpace","Social","ul","SocialItem","li","ContactTpl","email","facebookid","linkedinid","twitterid","myspaceid","githubid","button","obfuscated","href","name","size","Sample","div","font","sans","scatteredBif1","scatteredBif2","scatteredBif3","setType","Playground","hexArray","color","map","i","key","background","padding","fontWeight","Person","time","s","theme","actionDecor","breakpoint","tabletUp","PersonPic","avatar","actionColor","PersonDetails","phone","PersonName","h3","PersonLinks","Member","defaultAvatar","fname","github","lname","twitter","onClick","toggleModal","role","hasAvatar","fluid","childImageSharp","e","stopPropagation","rel","target","defaultProps","h2","titleColor","PersonBio","PersonQuote","PersonSocial","quote","PeopleSection","section","People","fadeIn","l","PeopleIntro","track","m","PeopleTpl","currentPerson","handleShowPerson","bind","obj","setState","prevState","overlords","members","accomplices","genericAvatar","edges","node","overlordsHeading","overlordsDescr","uid","membersHeading","membersDescr","accomplicesHeading","accomplicesDescr","PersonModal","Questions","isActive","FAQListingTpl","tab","switchTab","str","membershipQuestions","membership","partnershipQuestions","partnership","count","handleClick","partnershipTab","membershipTab","limit","EmojiHolder","EmojiTpl","BlogPostTpl","readingTime","Math","random","window","tick","setInterval","blogPost","cover","date","toFixed","alt","Projects","ol","desktopUp","Flag","span","dimmedColor","Project","ProjectCover","hasPlaceholder","ProjectHd","ProjectBd","ProjectFt","ProjectListingTpl","defaultCover","projects","genericCover","active","code","tagline","as","Link","to","text","LandingTpl","projectsCta","contactCta","Section","Element","Title","h1","Items","Item","ItemTitle","ItemText","Clients","clients","subtitle","client","link","fixed","logo","ItemImage","p","project","placeholder","Services","services","service","Testimonials","testimonials","testimonial","source","HomeTpl","projectsSubtitle","projectsTitle","clientsTitle","clientsSubtitle","servicesTitle","servicesSubtitle","goodatTitle","goodatSubtitle","goodat","testimonialsTitle","testimonialsSubtitle","PostList","Post","PostCover","PostHd","PostBd","PostFt","BlogListingTpl","posts","timeToRead","summary","MentionsList","Mention","highlight","MentionCover","MentionHd","MentionBd","Copy","MediaTpl","mentions","publication","Flex","BodyHd","BodyBd","BodyFt","Label","Name","Tagline","Description","Meta","Lists","ProjectItemTpl","images","portfolioItem","application","bifpresents","slides","needs","timeframe","push","forEach","slide","defaultImage","Object","keys","length","need","graphic","money","users","uxui","primary","createHTML","url"],"mappings":"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","file":"component---src-pages-playground-js-49d463069fa0e2f595b8.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { Copy, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\n\nexport default class AboutTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter, html } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nAboutTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query AboutTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Action, Icon, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace } from \"ui/mixins\";\n\nconst ContactHolder = styled(Tile)`\n  ${setSpace(\"pah\")};\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  text-align: center;\n`;\nconst Social = styled.ul`\n  ${setSpace(\"mtl\")};\n  text-align: left;\n`;\n\nconst SocialItem = styled.li`\n  ${setSpace(\"mts\")};\n  i {\n    ${setSpace(\"mrs\")};\n  }\n`;\n\nexport default class ContactTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    const {\n      email,\n      facebookid,\n      linkedinid,\n      twitterid,\n      myspaceid,\n      githubid\n    } = frontmatter;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Body>\n            <Header>\n              <h1 className=\"hero\">{frontmatter.heading}</h1>\n              <p className=\"para\">{frontmatter.subheading}</p>\n            </Header>\n            <ContactHolder>\n              <Action button obfuscated email={email} />\n              <Social>\n                {twitterid ? (\n                  <SocialItem>\n                    <Action href={`https://twitter.com/${twitterid}`}>\n                      <Icon name=\"twitter\" size=\"s\" />\n                      {twitterid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {githubid ? (\n                  <SocialItem>\n                    <Action href={`https://github.com/${githubid}`} size=\"s\">\n                      <Icon name=\"github\" />\n                      {githubid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {linkedinid ? (\n                  <SocialItem>\n                    <Action\n                      href={`https://linkedin.com/${linkedinid}`}\n                      size=\"s\"\n                    >\n                      <Icon name=\"linkedin\" />\n                      {linkedinid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {myspaceid ? (\n                  <SocialItem>\n                    <Action href={`https://myspace.com/${myspaceid}`} size=\"s\">\n                      <Icon name=\"myspace\" />\n                      {myspaceid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n                {facebookid ? (\n                  <SocialItem>\n                    <Action\n                      href={`https://facebook.com/${facebookid}`}\n                      size=\"s\"\n                    >\n                      <Icon name=\"facebook\" />\n                      {facebookid}\n                    </Action>\n                  </SocialItem>\n                ) : null}\n              </Social>\n            </ContactHolder>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nContactTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query ContactTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        email\n        facebookid\n        twitterid\n        githubid\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { scatteredBif1, scatteredBif2, scatteredBif3 } from \"assets/images\";\nimport { color, font } from \"ui/settings\";\nimport { setType } from \"ui/mixins\";\n\nconst Sample = styled.div`\n  font-family: ${font.sans};\n  overflow: hidden;\n  position: relative;\n  h1,\n  p,\n  span {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 1000px;\n  }\n  .PlxEl {\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n  .PlxEl1 {\n    background-image: url(${scatteredBif1});\n  }\n  .PlxEl2 {\n    background-image: url(${scatteredBif2});\n  }\n  .PlxEl3 {\n    background-image: url(${scatteredBif3});\n  }\n  h1 {\n    ${setType(\"h\")};\n    font-weight: 800;\n    font-style: italic;\n  }\n  span {\n    position: relative;\n    z-index: 100;\n    ${setType(\"s\")};\n  }\n  p {\n    ${setType(\"m\")};\n  }\n`;\n\nexport default class Playground extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { hexArray } = color;\n    return (\n      <>\n        {hexArray.map((color, i) => (\n          <Sample\n            key={i}\n            style={{\n              background: color,\n              color: \"white\",\n              padding: \"100px\",\n              fontWeight: \"bold\"\n            }}\n          >\n            <div className=\"PlxEl PlxEl1\" />\n            <div className=\"PlxEl PlxEl2\" />\n            <div className=\"PlxEl PlxEl3\" />\n            <span>{color}</span>\n            <h1>\n              Bad Idea Factory is a collective of chaotic creatives using\n              technology to make people thinking face emoji. We have been\n              working in this space for hundreds of thousands of years.\n            </h1>\n            <p>\n              Bad Idea Factory is a collective of chaotic creatives using\n              technology to make people thinking face emoji. We have been\n              working in this space for hundreds of thousands of years.\n            </p>\n          </Sample>\n        ))}\n      </>\n    );\n  }\n}\n\nPlayground.propTypes = {};\n","import React from \"react\";\n\nimport { Playground } from \"ui/templates\";\n\nexport default props => <Playground {...props} />;\n","import { func, object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Action, Icon } from \"ui/components\";\nimport { breakpoint, time } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Person = styled.li`\n  align-items: center;\n  background: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  transition: box-shadow ${time.s}, transform ${time.s};\n  &:hover {\n    box-shadow: 6px 6px 0 0 ${({ theme }) => theme.actionDecor};\n    transform: translate(-1px, -1px);\n  }\n  ${breakpoint.tabletUp} {\n    ${setSpace(\"pan\")};\n    );\n  }\n`;\n\nconst PersonPic = styled.div`\n  background: ${({ theme, avatar }) => (avatar ? \"\" : theme.actionColor)};\n  border: 2px solid ${({ theme }) => theme.background};\n  flex: 0 0 ${100 / 3}%;\n`;\n\nconst PersonDetails = styled.div`\n  ${setSpace(\"phm\")};\n  ${setType(\"s\")};\n  ${breakpoint.phone} {\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n  }\n`;\n\nconst PersonName = styled.h3`\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.color};\n  span {\n    display: block;\n    &:first-child {\n      ${setType(\"m\")};\n      color: ${({ theme }) => theme.actionColor};\n      font-weight: 800;\n    }\n  }\n`;\n\nconst PersonLinks = styled.div`\n  ${setSpace(\"mts\")};\n  & > * {\n    ${setSpace(\"mrs\")};\n    line-height: 1em;\n  }\n  ${breakpoint.phone} {\n    display: none;\n  }\n`;\n\nconst Member = props => {\n  const { defaultAvatar } = props;\n  const { frontmatter } = props.data;\n  const { avatar, fname, github, lname, twitter } = frontmatter;\n  return (\n    <Person onClick={props.toggleModal} role=\"button\">\n      <PersonPic hasAvatar={avatar}>\n        <Img\n          fluid={avatar ? avatar.childImageSharp.fluid : defaultAvatar.fluid}\n        />\n      </PersonPic>\n      <PersonDetails>\n        <PersonName>\n          <span>{fname}</span> <span>{lname}</span>\n        </PersonName>\n        <PersonLinks>\n          {twitter ? (\n            <Action\n              onClick={e => e.stopPropagation()}\n              href={`https://twitter.com/${twitter}`}\n              rel=\"external\"\n              target=\"_blank noreferrer nofollow\"\n            >\n              <Icon name=\"twitter\" size=\"s\" />\n            </Action>\n          ) : null}\n          {github ? (\n            <Action\n              onClick={e => e.stopPropagation()}\n              href={`https://github.com/${github}`}\n              rel=\"external\"\n              target=\"_blank noreferrer nofollow\"\n            >\n              <Icon name=\"github\" size=\"s\" />\n            </Action>\n          ) : null}\n        </PersonLinks>\n      </PersonDetails>\n    </Person>\n  );\n};\n\nMember.propTypes = {\n  defaultAvatar: object.isRequired,\n  data: shape({\n    frontmatter: object.isRequired\n  }).isRequired,\n  toggleModal: func.isRequired\n};\n\nMember.defaultProps = {};\n\nexport default Member;\n","import { func, object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Action, Copy, Icon, Modal } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Person = styled.div`\n  ${setSpace(\"pbh\")};\n  ${breakpoint.tabletUp} {\n    display: flex;\n    flex-direction: row;\n  }\n`;\nconst PersonPic = styled.div`\n  background: ${({ hasAvatar, theme }) =>\n    !hasAvatar ? theme.actionColor : \"\"};\n  ${breakpoint.tabletUp} {\n    flex: 0 0 ${100 / 4}%;\n  }\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n    & > * {\n      margin-left: auto;\n      margin-right: auto;\n      max-width: 200px;\n    }\n  }\n`;\nconst PersonDetails = styled.div`\n  ${setType(\"s\")};\n  ${breakpoint.tabletUp} {\n    ${setSpace(\"pll\")};\n  }\n`;\nconst PersonName = styled.h2`\n  ${setType(\"l\")};\n  font-weight: 800;\n  color: ${({ theme }) => theme.titleColor};\n`;\nconst PersonBio = styled.div`\n  ${setSpace(\"mvm\")};\n  ${setType(\"m\")};\n  color: ${({ theme }) => theme.titleColor};\n`;\nconst PersonQuote = styled.div`\n  ${setSpace(\"mvm\")};\n`;\nconst PersonSocial = styled.div`\n  & > *:not(:first-child) {\n    ${setSpace(\"mlm\")};\n  }\n  & > *:not(:last-child) {\n    ${setSpace(\"mrm\")};\n  }\n`;\n\nconst Member = props => {\n  const { defaultAvatar } = props;\n  const { frontmatter, html } = props.data;\n  const { avatar, fname, github, lname, quote, twitter } = frontmatter;\n  return (\n    <Modal toggleModal={props.toggleModal}>\n      <Person>\n        <PersonPic hasAvatar={avatar}>\n          <Img\n            fluid={avatar ? avatar.childImageSharp.fluid : defaultAvatar.fluid}\n          />\n        </PersonPic>\n        <PersonDetails>\n          <PersonName>\n            {fname} {lname}\n          </PersonName>\n          <PersonBio>\n            <Copy dangerouslySetInnerHTML={{ __html: html }} />\n          </PersonBio>\n          <PersonQuote>{quote}</PersonQuote>\n          <PersonSocial>\n            <Action href={`https://github.com/${github}`} target=\"_blank\">\n              <Icon name=\"github\" /> GitHub\n            </Action>\n            <Action href={`https://twitter.com/${twitter}`} target=\"_blank\">\n              <Icon name=\"twitter\" /> Twitter\n            </Action>\n          </PersonSocial>\n        </PersonDetails>\n      </Person>\n    </Modal>\n  );\n};\n\nMember.propTypes = {\n  defaultAvatar: object.isRequired,\n  data: shape({\n    frontmatter: object.isRequired\n  }).isRequired,\n  toggleModal: func.isRequired\n};\n\nMember.defaultProps = {};\n\nexport default Member;\n","import { object, shape } from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { breakpoint, time, track } from \"ui/settings\";\nimport { fadeIn } from \"ui/animations\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport Person from \"./ofPeople/Person\";\nimport PersonModal from \"./ofPeople/PersonModal\";\n\nconst PeopleSection = styled.section`\n  ${setSpace(\"mbk\")};\n`;\n\nconst People = styled.ul`\n  animation: ${fadeIn} ${time.l} linear;\n  width: 100%;\n  display: grid;\n  grid-gap: 10px;\n  ${breakpoint.phone} {\n    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n  }\n  ${breakpoint.tabletUp} {\n    grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  }\n`;\n\nconst PeopleIntro = styled.div`\n  ${setSpace(\"mbh\")};\n  text-align: center;\n  h2 {\n    ${setSpace(\"mbm\")};\n    ${setSpace(\"phs\")};\n    ${setSpace(\"pvx\")};\n    ${setType(\"s\")};\n    background: white;\n    color: ${({ theme }) => theme.actionColor};\n    display: inline-block;\n    font-weight: 800;\n    letter-spacing: ${track.m};\n    text-transform: uppercase;\n  }\n  p {\n    ${setType(\"l\")};\n    color: white;\n  }\n`;\n\nexport default class PeopleTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPerson: null\n    };\n    this.handleShowPerson = this.handleShowPerson.bind(this);\n  }\n\n  handleShowPerson(obj) {\n    this.setState(prevState => ({\n      currentPerson: prevState.currentPerson ? null : obj\n    }));\n  }\n\n  render() {\n    const { currentPerson } = this.state;\n    const { defaultAvatar, overlords, members, accomplices } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    const genericAvatar = defaultAvatar.edges[0].node.childImageSharp;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PeopleSection>\n              <PeopleIntro>\n                <h2>{frontmatter.overlordsHeading}</h2>\n                <p>{frontmatter.overlordsDescr}</p>\n              </PeopleIntro>\n              <People>\n                {overlords.edges.map(({ node }) => (\n                  <Person\n                    data={node}\n                    defaultAvatar={genericAvatar}\n                    key={node.frontmatter.uid}\n                    toggleModal={e => this.handleShowPerson(node, e)}\n                  />\n                ))}\n              </People>\n            </PeopleSection>\n            <PeopleIntro>\n              <h2>{frontmatter.membersHeading}</h2>\n              <p>{frontmatter.membersDescr}</p>\n            </PeopleIntro>\n            <PeopleSection>\n              <People>\n                {members.edges.map(({ node }) => (\n                  <Person\n                    data={node}\n                    defaultAvatar={genericAvatar}\n                    key={node.frontmatter.uid}\n                    toggleModal={e => this.handleShowPerson(node, e)}\n                  />\n                ))}\n              </People>\n            </PeopleSection>\n            <PeopleSection>\n              <PeopleIntro>\n                <h2>{frontmatter.accomplicesHeading}</h2>\n                <p>{frontmatter.accomplicesDescr}</p>\n              </PeopleIntro>\n              <People>\n                {accomplices.edges.map(({ node }) => (\n                  <Person\n                    data={node}\n                    defaultAvatar={genericAvatar}\n                    key={node.frontmatter.uid}\n                    toggleModal={e => this.handleShowPerson(node, e)}\n                  />\n                ))}\n              </People>\n            </PeopleSection>\n          </Body>\n          {currentPerson !== null ? (\n            <PersonModal\n              toggleModal={this.handleShowPerson}\n              data={currentPerson}\n              defaultAvatar={genericAvatar}\n            />\n          ) : null}\n        </Layout>\n      </>\n    );\n  }\n}\n\nPeopleTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    overlords: object.isRequired,\n    members: object.isRequired,\n    accomplices: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query PeopleTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        accomplicesHeading\n        accomplicesDescr\n        membersHeading\n        membersDescr\n        overlordsHeading\n        overlordsDescr\n      }\n    }\n    defaultAvatar: allFile(\n      filter: { relativePath: { eq: \"images/default-avatar.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 240\n              maxHeight: 300\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    overlords: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/people/bios/*/.*/*.md/\" }\n        frontmatter: { role: { elemMatch: { overlord: { eq: true } } } }\n      }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            fname\n            github\n            lname\n            quote\n            score\n            twitter\n            uid\n            avatar {\n              childImageSharp {\n                fluid(\n                  maxWidth: 240\n                  maxHeight: 300\n                  cropFocus: CENTER\n                  traceSVG: {\n                    color: \"#ffffff\"\n                    optTolerance: 0.1\n                    turdSize: 10\n                    turnPolicy: TURNPOLICY_MINORITY\n                  }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    members: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/people/bios/*/.*/*.md/\" }\n        frontmatter: { role: { elemMatch: { member: { eq: true } } } }\n      }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            fname\n            github\n            lname\n            quote\n            score\n            twitter\n            uid\n            avatar {\n              childImageSharp {\n                fluid(\n                  maxWidth: 240\n                  maxHeight: 300\n                  cropFocus: CENTER\n                  traceSVG: {\n                    color: \"#ffffff\"\n                    optTolerance: 0.1\n                    turdSize: 10\n                    turnPolicy: TURNPOLICY_MINORITY\n                  }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    accomplices: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/people/bios/*/.*/*.md/\" }\n        frontmatter: { role: { elemMatch: { accomplice: { eq: true } } } }\n      }\n      sort: { order: DESC, fields: [frontmatter___score, frontmatter___lname] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            fname\n            github\n            lname\n            quote\n            score\n            twitter\n            uid\n            avatar {\n              childImageSharp {\n                fluid(\n                  maxWidth: 240\n                  maxHeight: 300\n                  cropFocus: CENTER\n                  traceSVG: {\n                    color: \"#ffffff\"\n                    optTolerance: 0.1\n                    turdSize: 10\n                    turnPolicy: TURNPOLICY_MINORITY\n                  }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Tabs, Tab, Tile } from \"ui/components\";\nimport { setSpace } from \"ui/mixins\";\n\nconst Questions = styled(Tile)`\n  ${setSpace(\"pah\")};\n  display: ${({ isActive }) => (isActive ? \"block\" : \"none\")};\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 900px;\n`;\n\nexport default class FAQListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tab: \"partnership\"\n    };\n    this.switchTab = this.switchTab.bind(this);\n  }\n\n  switchTab(str) {\n    this.setState({ tab: str });\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    const membershipQuestions = this.props.data.membership.edges[0].node.html;\n    const partnershipQuestions = this.props.data.partnership.edges[0].node.html;\n    return (\n      <>\n        <Helmet {...this.props} title=\"Frequently Asked Questions\" />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            <Tabs count={2}>\n              <Tab\n                handleClick={() => this.switchTab(\"partnership\")}\n                isActive={this.state.tab === \"partnership\"}\n              >\n                {frontmatter.partnershipTab}\n              </Tab>\n              <Tab\n                handleClick={() => this.switchTab(\"membership\")}\n                isActive={this.state.tab === \"membership\"}\n              >\n                {frontmatter.membershipTab}\n              </Tab>\n            </Tabs>\n            <Questions isActive={this.state.tab === \"partnership\"} limit>\n              <Copy\n                dangerouslySetInnerHTML={{ __html: partnershipQuestions }}\n              />\n            </Questions>\n            <Questions isActive={this.state.tab === \"membership\"} limit>\n              <Copy dangerouslySetInnerHTML={{ __html: membershipQuestions }} />\n            </Questions>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nFAQListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    membership: object.isRequired,\n    partnership: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query FAQTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        membershipTab\n        partnershipTab\n      }\n    }\n    membership: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/question/membership/*/.*/*.md/\" }\n      }\n      sort: { order: ASC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n        }\n      }\n    }\n    partnership: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//pages/question/partnership/*/.*/*.md/\" }\n      }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace } from \"ui/mixins\";\n\nconst EmojiHolder = styled(Tile)`\n  ${setSpace(\"pak\")};\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 600px;\n  text-align: center;\n  ${breakpoint.phone} {\n    ${setSpace(\"pvh\")};\n  }\n  i {\n    ${setSpace(\"mbl\")};\n    color: ${({ theme }) => theme.actionColor};\n    display: inline-block;\n    font-size: 240px;\n    height: 240px;\n    line-height: 240px;\n    width: 240px;\n    ${breakpoint.phone} {\n      font-size: 200px;\n      height: 200px;\n      line-height: 200px;\n      width: 200px;\n    }\n  }\n  h2 {\n    font-size: 36px;\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    ${breakpoint.phone} {\n      font-size: 26px;\n    }\n  }\n`;\n\nexport default class EmojiTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Body>\n            <Header>\n              <h1 className=\"hero\">{frontmatter.heading}</h1>\n              <p className=\"para\">{frontmatter.subheading}</p>\n            </Header>\n            <EmojiHolder>\n              <Icon name=\"thinking\" className=\"emoji\" />\n              <h2 className=\"name\">:thinkingface:</h2>\n            </EmojiHolder>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nEmojiTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query EmojiTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Tile } from \"ui/components\";\n\nexport default class BlogPostTpl extends Component {\n  constructor(props) {\n    super(props);\n    const readingTime = Math.random() * 300;\n    if (typeof window !== \"undefined\") {\n      this.tick = this.tick.bind(this);\n      setInterval(this.tick, 3000);\n    }\n    this.state = {\n      readingTime\n    };\n  }\n\n  tick() {\n    this.setState(prevState => ({\n      readingTime: prevState.readingTime + Math.random() * 15 - 4\n    }));\n  }\n\n  render() {\n    const blogPost = this.props.data.markdownRemark;\n    const { frontmatter, html } = blogPost;\n    const { cover, date, title } = frontmatter;\n    return (\n      <>\n        <Helmet {...this.props} title={title} />\n        <Layout {...this.props}>\n          <Header>\n            <span className=\"small\">\n              Reading Time: {this.state.readingTime.toFixed(2)} seconds\n            </span>\n            <h1 className=\"hero\">{title}</h1>\n            <span className=\"small\">{date}</span>\n          </Header>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            {cover ? (\n              <Img fluid={cover.childImageSharp.fluid} alt={title} />\n            ) : null}\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogPostTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogPostsByUID($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        cover {\n          childImageSharp {\n            fluid(\n              maxWidth: 800\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Projects = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 40px;\n    grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\n  }\n`;\n\nconst Flag = styled.span`\n  ${setType(\"x\")};\n  ${setSpace(\"mlx\")};\n  color: ${({ theme }) => theme.dimmedColor};\n  font-weight: 800;\n  text-transform: uppercase;\n`;\n\nconst Project = styled.li`\n  grid-row-end: span 1;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n  ${breakpoint.tabletUp} {\n    &:nth-child(even) {\n      transform: translateY(30px);\n    }\n  }\n`;\n\nconst ProjectCover = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  position: relative;\n  ${({ hasPlaceholder, theme }) =>\n    hasPlaceholder\n      ? `\n  .thinking {\n    color: ${theme.actionColor};\n    display: inline-block;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    i {\n      font-size: 80px !important;\n    }\n  }`\n      : ``};\n`;\n\nconst ProjectHd = styled.div`\n  ${setSpace(\"mbm\")};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  span.code {\n    align-items: center;\n    color: ${({ theme }) => theme.titleColor};\n    display: flex;\n  }\n  span.date {\n    color: ${({ theme }) => theme.dimmedColor};\n  }\n`;\n\nconst ProjectBd = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  h2 {\n    max-width: 75%;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst ProjectFt = styled.div`\n  color: ${({ theme }) => theme.titleColor};\n  p.summary {\n    ${setSpace(\"mts\")};\n  }\n`;\n\nexport default class ProjectListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { defaultCover, projects, markdownRemark } = this.props.data;\n    const genericCover = defaultCover.edges[0].node.childImageSharp;\n    const { frontmatter } = markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <Projects>\n              {projects.edges.map(({ node }) => {\n                const {\n                  active,\n                  cover,\n                  date,\n                  code,\n                  tagline,\n                  title,\n                  uid\n                } = node.frontmatter;\n                return (\n                  <Project key={uid} as=\"li\">\n                    <Tile as={Link} to={`/projects/${uid}`}>\n                      <ProjectHd>\n                        <span className=\"code\">\n                          {code} {!active ? <Flag>(Hibernated)</Flag> : null}\n                        </span>\n                        <span className=\"date\">{date}</span>\n                      </ProjectHd>\n                      <ProjectCover hasPlaceholder={!cover}>\n                        <Img\n                          fluid={\n                            cover\n                              ? cover.childImageSharp.fluid\n                              : genericCover.fluid\n                          }\n                          alt={title}\n                        />\n\n                        {!cover ? (\n                          <span className=\"thinking\">\n                            <Icon name=\"thinking\" size=\"h\" />\n                          </span>\n                        ) : null}\n                      </ProjectCover>\n                      <ProjectBd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read more…\" />\n                        </span>\n                      </ProjectBd>\n                      <ProjectFt>\n                        <p className=\"summary\">{tagline}</p>\n                      </ProjectFt>\n                    </Tile>\n                  </Project>\n                );\n              })}\n            </Projects>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nProjectListingTpl.propTypes = {\n  data: shape({\n    projects: object.isRequired,\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query ProjectsTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/projects/.*project.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___score, frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            uid\n            date(formatString: \"MMM YYYY\")\n            title\n            active\n            tagline\n            code\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 600\n                  quality: 90\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { Actionbar, Action, Copy, Tile } from \"ui/components\";\nimport { Body, Pitch, Helmet, Layout } from \"ui/partials\";\n\nexport default class LandingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter, html } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Pitch>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <Actionbar>\n              <Action button to=\"/projects\">\n                {frontmatter.projectsCta}\n              </Action>\n              <Action to=\"/contact\">{frontmatter.contactCta}</Action>\n            </Actionbar>\n          </Pitch>\n          <Body\n            style={{\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              maxWidth: \"900px\"\n            }}\n          >\n            <Tile space=\"h\">\n              <Copy dangerouslySetInnerHTML={{ __html: html }} />\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nLandingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query LandingTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n        contactCta\n        projectsCta\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nimport { setSpace } from \"ui/mixins\";\n\nconst Section = styled.div`\n  ${setSpace(\"mvk\")};\n  display: flex;\n  justify-content: center;\n  .el {\n    width: 100%;\n  }\n  &:not(:last-child) {\n    ${setSpace(\"pbk\")};\n  }\n`;\n\nexport default Section;\n","import { array, string } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Tile } from \"ui/components\";\nimport { Header } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    & > * {\n      grid-row-end: span 1;\n    }\n  }\n`;\nconst Item = styled.li`\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n`;\nconst ItemTitle = styled.h3`\n  ${setSpace(\"mbm\")};\n`;\nconst ItemText = styled.div`\n  color: ${({ theme }) => theme.color};\n  strong {\n    font-weight: 600;\n  }\n`;\n\nconst Clients = props => {\n  const { clients, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {clients.map(({ node }) => {\n            const client = node.frontmatter;\n            return (\n              <Item key={node.uid}>\n                <Tile href={client.link} target=\"_blank\" as=\"a\">\n                  <ItemTitle>\n                    <Img\n                      fixed={client.logo.childImageSharp.fixed}\n                      alt={client.name}\n                    />\n                  </ItemTitle>\n                  <ItemText dangerouslySetInnerHTML={{ __html: node.html }} />\n                </Tile>\n              </Item>\n            );\n          })}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nClients.propTypes = {\n  clients: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Clients;\n","import { array, string } from \"prop-types\";\nimport { Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { breakpoint } from \"ui/settings\";\nimport { Header } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport { Tile, Icon } from \"ui/components\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(214px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(291px, 1fr));\n  }\n`;\nconst Item = styled.li`\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n`;\nconst ItemImage = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  position: relative;\n  ${({ hasPlaceholder, theme }) =>\n    hasPlaceholder\n      ? `\n    .thinking {\n      color: ${theme.actionColor};\n      display: inline-block;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      i {\n        font-size: 80px !important;\n      }\n  `\n      : ``};\n`;\nconst ItemTitle = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h3,\n  span {\n    ${setType(\"m\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  h3 {\n    max-width: 75%;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\nconst ItemText = styled.p`\n  ${setSpace(\"mts\")};\n`;\n\nconst Projects = props => {\n  const { projects, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {projects.map(({ node }) => {\n            const project = node.frontmatter;\n            return (\n              <Item key={node.uid}>\n                <Tile as={Link} to={`/projects/${project.uid}`}>\n                  <ItemImage hasPlaceholder={!project.cover}>\n                    <Img\n                      fluid={\n                        project.cover\n                          ? project.cover.childImageSharp.fluid\n                          : props.placeholder\n                      }\n                      alt={project.title}\n                    />\n                    {!project.cover ? (\n                      <span className=\"thinking\">\n                        <Icon name=\"thinking\" />\n                      </span>\n                    ) : null}\n                  </ItemImage>\n                  <ItemTitle>\n                    <h3 className=\"title\">{project.title}</h3>\n                    <span>\n                      <Icon name=\"arrow-right\" text=\"Read more…\" />\n                    </span>\n                  </ItemTitle>\n                  <ItemText>{project.tagline}</ItemText>\n                </Tile>\n              </Item>\n            );\n          })}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nProjects.propTypes = {\n  projects: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Projects;\n","import { array, string } from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { breakpoint } from \"ui/settings\";\nimport { Header } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport { Tile } from \"ui/components\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 10px;\n    grid-template-columns: repeat(auto-fill, minmax(330px, 1fr));\n    & > * {\n      grid-row-end: span 1;\n    }\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(221px, 1fr));\n  }\n`;\nconst Item = styled.li`\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n`;\nconst ItemTitle = styled.h3`\n  ${setSpace(\"mbm\")};\n  ${setType(\"l\")};\n  font-weight: 800;\n`;\n\nconst Services = props => {\n  const { services, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {services.map((service, i) => (\n            <Item key={i}>\n              <Tile space=\"l\">\n                <ItemTitle className=\"TileTitle\">{service.title}</ItemTitle>\n                <p>{service.text}</p>\n              </Tile>\n            </Item>\n          ))}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nServices.propTypes = {\n  services: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Services;\n","import { array, string } from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Tile } from \"ui/components\";\nimport { Header } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport Section from \"./Section\";\n\nconst Element = styled(Section)``;\nconst Title = styled.h1`\n  &.hero {\n    ${setType(\"h\")};\n  }\n`;\nconst Items = styled.ul`\n  width: 100%;\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    & > * {\n      grid-row-end: span 1;\n    }\n  }\n`;\nconst Item = styled.li`\n  height: 100%;\n  .quote {\n    ${setSpace(\"mbs\")};\n    ${setSpace(\"pal\")};\n    position: relative;\n    &:after,\n    &:before {\n      color: ${({ theme }) => theme.background};\n      ${setType(\"k\")};\n      position: absolute;\n    }\n    &:before {\n      content: \"“\";\n      top: 0;\n      left: 0;\n    }\n    &:after {\n      content: \"”\";\n      bottom: 0;\n      right: 0;\n    }\n  }\n  .source {\n    ${setType(\"s\")};\n    text-align: right;\n  }\n  ${breakpoint.phone} {\n    &:not(:last-child) {\n      ${setSpace(\"mbx\")};\n    }\n  }\n  ${({ span }) =>\n    span\n      ? `\n    grid-column: 1 / span 2;\n    grid-row: 1 / 2;\n    justify-self: stretch;\n    align-self: stretch;\n  `\n      : ``};\n`;\n\nconst Testimonials = props => {\n  const { testimonials, title, subtitle } = props;\n  return (\n    <Element as=\"section\">\n      <div className=\"el\">\n        <Header className=\"hd\">\n          <Title className=\"hero\">{title}</Title>\n          {subtitle ? <p className=\"para\">{subtitle}</p> : null}\n        </Header>\n        <Items>\n          {testimonials.map((testimonial, i) => (\n            <Item key={i} span={testimonial.span}>\n              <Tile>\n                <blockquote className=\"quote\">\n                  <p>{testimonial.text}</p>\n                </blockquote>\n                <p className=\"source\">— {testimonial.source}</p>\n              </Tile>\n            </Item>\n          ))}\n        </Items>\n      </div>\n    </Element>\n  );\n};\n\nTestimonials.propTypes = {\n  testimonials: array.isRequired,\n  subtitle: string.isRequired,\n  title: string.isRequired\n};\n\nexport default Testimonials;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\n\nimport { Action, Actionbar } from \"ui/components\";\nimport { Helmet, Layout, Pitch } from \"ui/partials\";\n\nimport Clients from \"./ofHome/Clients\";\nimport Projects from \"./ofHome/Projects\";\nimport Services from \"./ofHome/Services\";\nimport Testimonials from \"./ofHome/Testimonials\";\n\nexport default class HomeTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { frontmatter } = this.props.data.markdownRemark;\n    const { clients, projects, defaultCover } = this.props.data;\n    const genericCover = defaultCover.edges[0].node.childImageSharp;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Pitch>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <Actionbar>\n              <Action button href=\"https://github.com/BadIdeaFactory/corporate/issues?q=is%3Aissue+is%3Aopen+label%3A%22project+application%22\" target=\"_blank\">\n                Submit an idea\n              </Action>\n              <Action href=\"https://patreon.com/biffud\" target=\"_blank\">Give us money</Action>\n              <span className=\"join\">or</span>\n              <Action to=\"contact\">Engage our services</Action>\n            </Actionbar>\n          </Pitch>\n          <Projects\n            placeholder={genericCover.fluid}\n            projects={projects.edges}\n            subtitle={frontmatter.projectsSubtitle}\n            title={frontmatter.projectsTitle}\n          />\n          <Clients\n            title={frontmatter.clientsTitle}\n            subtitle={frontmatter.clientsSubtitle}\n            clients={clients.edges}\n          />\n          <Services\n            title={frontmatter.servicesTitle}\n            subtitle={frontmatter.servicesSubtitle}\n            services={frontmatter.services}\n          />\n          <Services\n            title={frontmatter.goodatTitle}\n            subtitle={frontmatter.goodatSubtitle}\n            services={frontmatter.goodat}\n          />\n          <Testimonials\n            title={frontmatter.testimonialsTitle}\n            subtitle={frontmatter.testimonialsSubtitle}\n            testimonials={frontmatter.testimonials}\n          />\n        </Layout>\n      </>\n    );\n  }\n}\n\nHomeTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query HomeTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        contactCta\n        projectsCta\n        servicesTitle\n        servicesSubtitle\n        services {\n          title\n          text\n        }\n        testimonialsTitle\n        testimonialsSubtitle\n        testimonials {\n          text\n          source\n          span\n        }\n        goodatTitle\n        goodatSubtitle\n        goodat {\n          title\n          text\n        }\n        clientsSubtitle\n        clientsTitle\n        projectsSubtitle\n        projectsTitle\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 800\n              maxHeight: 600\n              quality: 90\n              cropFocus: CENTER\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    clients: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/clients/.*client.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___score] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            uid\n            name\n            score\n            link\n            logo {\n              childImageSharp {\n                fixed(\n                  height: 40\n                  quality: 80\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFixed_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/projects/.*project.md/\" } }\n      limit: 3\n      sort: {\n        order: DESC\n        fields: [frontmatter___feature, frontmatter___score, frontmatter___date]\n      }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            uid\n            title\n            active\n            feature\n            tagline\n            code\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 800\n                  cropFocus: CENTER\n                  maxHeight: 600\n                  quality: 90\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst PostList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Post = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst PostCover = styled.div`\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  ${setSpace(\"mbm\")};\n`;\n\nconst PostHd = styled.div`\n  ${setSpace(\"mbs\")};\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst PostBd = styled.div`\n  ${setSpace(\"mbm\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst PostFt = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    ${setType(\"s\")};\n    color: ${({ theme }) => theme.color};\n  }\n`;\n\nexport default class BlogListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { posts } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PostList>\n              {posts.edges.map(({ node }) => {\n                const { timeToRead } = node;\n                const { cover, date, summary, title, uid } = node.frontmatter;\n                return (\n                  <Post key={uid} as=\"li\">\n                    <Tile to={`/tldr/${uid}`} as={Link}>\n                      {cover ? (\n                        <PostCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </PostCover>\n                      ) : null}\n                      <PostHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read more…\" />\n                        </span>\n                      </PostHd>\n                      <PostBd>\n                        <p className=\"summary\">{summary}</p>\n                      </PostBd>\n                      <PostFt>\n                        <span>{date}</span>\n                        <span>{timeToRead} min read</span>\n                      </PostFt>\n                    </Tile>\n                  </Post>\n                );\n              })}\n            </PostList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    posts: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/tldr/.*post.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            uid\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            date(formatString: \"MMMM D, YYYY\")\n            summary\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Copy, Icon, Tile } from \"ui/components\";\n\nconst MentionsList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Mention = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n  ${({ highlight }) =>\n    highlight\n      ? `\n    grid-column: 1 / span 2;\n    grid-row: 1 / 2;\n    justify-self: stretch;\n    align-self: stretch;\n  `\n      : ``};\n`;\n\nconst MentionCover = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  display: block;\n`;\n\nconst MentionHd = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n`;\n\nconst MentionBd = styled.div`\n  ${setSpace(\"mts\")};\n  color: ${({ theme }) => theme.titleColor};\n  ${Copy} {\n    ${setSpace(\"mbs\")};\n  }\n`;\n\nexport default class MediaTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { mentions } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <MentionsList>\n              {mentions.edges.map(({ node }) => {\n                const { html } = node;\n                const {\n                  cover,\n                  publication,\n                  source,\n                  highlight,\n                  title\n                } = node.frontmatter;\n                return (\n                  <Mention as=\"li\" highlight={highlight}>\n                    <Tile href={source} target=\"_blank\" as=\"a\">\n                      {cover ? (\n                        <MentionCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </MentionCover>\n                      ) : null}\n                      <MentionHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"popout\" text=\"Read the article…\" />\n                        </span>\n                      </MentionHd>\n                      <MentionBd>\n                        {html ? (\n                          <>\n                            <Copy dangerouslySetInnerHTML={{ __html: html }} />\n                          </>\n                        ) : null}\n                        <p>by {publication}</p>\n                      </MentionBd>\n                    </Tile>\n                  </Mention>\n                );\n              })}\n            </MentionsList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nMediaTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    mentions: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query MediaTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    mentions: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"//pages/fame/.*mention.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            date(formatString: \"MMMM YYYY\")\n            title\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            link\n            highlight\n            publication\n            source\n            uid\n          }\n        }\n      }\n    }\n  }\n`;\n","import { graphql } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { Actionbar, Action, Icon, Gallery, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Flex = styled.div`\n  ${breakpoint.tabletUp} {\n    display: flex;\n    & div.sideA,\n    & div.sideB {\n      flex: 0 0 50%;\n    }\n    & div.sideA {\n      ${setSpace(\"prl\")};\n    }\n    & div.sideB {\n      ${setSpace(\"pll\")};\n    }\n  }\n`;\n\nconst BodyHd = styled(Flex)`\n  ${setSpace(\"mbl\")};\n  ${breakpoint.tabletUp} {\n    display: flex;\n  }\n  & div.sideB {\n    display: flex;\n  }\n  & div.time,\n  & div.code {\n    flex: 0 0 50%;\n  }\n  ${breakpoint.phone} {\n    & div.sideB {\n      ${setSpace(\"mtl\")}\n    }\n  }\n`;\n\nconst BodyBd = styled(Flex)`\n  ${setSpace(\"mvl\")};\n  a {\n    color: ${({ theme }) => theme.actionColor};\n    text-decoration: underline;\n  }\n`;\n\nconst BodyFt = styled.div`\n  ${setSpace(\"mth\")};\n  ${setType(\"s\")};\n`;\n\nconst Label = styled.h2`\n  ${setSpace(\"mbs\")};\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.dimmedColor};\n`;\n\nconst Name = styled.p`\n  ${setType(\"h\")};\n  font-weight: 800;\n  color: ${({ theme }) => theme.titleColor};\n  text-transform: uppercase;\n`;\n\nconst Tagline = styled.p`\n  ${setSpace(\"mbl\")};\n  ${setType(\"l\")};\n  font-weight: 600;\n  color: ${({ theme }) => theme.titleColor};\n`;\n\nconst Description = styled.div`\n  color: ${({ theme }) => theme.titleColor};\n  p {\n    &:not(:last-child) {\n      ${setSpace(\"mbm\")};\n    }\n  }\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-weight: 800;\n  }\n  a {\n    color: ${({ theme }) => theme.actionColor};\n  }\n  em {\n    font-style: italic;\n  }\n  strong {\n    color: ${({ theme }) => theme.titleColor};\n    font-weight: 800;\n  }\n  ul,\n  ol {\n    ${setType(\"s\")};\n  }\n  ul li:before {\n    ${setSpace(\"mrs\")};\n    color: ${({ theme }) => theme.color};\n    content: \"–\";\n    display: inline-block;\n  }\n  ol li {\n    list-style: decimal;\n  }\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst Meta = styled.p`\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.titleColor};\n  font-weight: 800;\n  text-transform: uppercase;\n`;\n\nconst Lists = styled.div`\n  ${setSpace(\"mtl\")};\n  ${setType(\"s\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  & > * {\n    flex: 0 0 50%;\n  }\n  li:before {\n    ${setSpace(\"mrx\")};\n    color: ${({ theme }) => theme.dimmedColor};\n    content: \"—\";\n  }\n  i {\n    color: ${({ theme }) => theme.dimmedColor};\n  }\n`;\n\nexport default class ProjectItemTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const portfolioItem = this.props.data.markdownRemark;\n    const genericCover = this.props.data.defaultCover.edges[0].node\n      .childImageSharp;\n    const { frontmatter, html } = portfolioItem;\n    const {\n      application,\n      bifpresents,\n      cover,\n      date,\n      slides,\n      link,\n      needs,\n      code,\n      source,\n      tagline,\n      timeframe,\n      title\n    } = frontmatter;\n\n    const displayGallery = () => {\n      const images = [];\n      if (cover) {\n        images.push(cover.childImageSharp.fluid);\n      }\n      if (slides) {\n        slides.forEach(slide => images.push(slide.childImageSharp.fluid));\n      }\n      return <Gallery images={images} defaultImage={genericCover.fluid} />;\n    };\n\n    return (\n      <>\n        <Helmet {...this.props} title={title} />\n        <Layout {...this.props}>\n          <Header>\n            <span className=\"small\">BIFFUD Presents</span>\n            <h1 className=\"hero\">{bifpresents}</h1>\n            <span className=\"small\">{date}</span>\n          </Header>\n          <Body>\n            <Tile space=\"h\">\n              <BodyHd>\n                <div className=\"sideA\">\n                  <div className=\"name\">\n                    <Label>Project name</Label>\n                    <Name>{title}</Name>\n                  </div>\n                </div>\n                <div className=\"sideB\">\n                  <div className=\"time\">\n                    <Label>Timeframe</Label>\n                    <Meta>{timeframe}</Meta>\n                  </div>\n                  <div className=\"code\">\n                    <Label>Code</Label>\n                    <Meta>{code}</Meta>\n                  </div>\n                </div>\n              </BodyHd>\n              <BodyBd>\n                <div className=\"sideA\">\n                  <Label>Tagline</Label>\n                  <Tagline>{tagline}</Tagline>\n                  <Label>Description</Label>\n                  <Description dangerouslySetInnerHTML={{ __html: html }} />\n                </div>\n                <div className=\"sideB\">\n                  <Label>Proofs</Label>\n                  {displayGallery()}\n                  <Lists>\n                    {source || application ? (\n                      <div className=\"sideB\" style={{ padding: \"0\" }}>\n                        <Label>More Proofs</Label>\n                        <ul>\n                          {source ? (\n                            <li>\n                              <a href={source} target=\"_blank\">\n                                Source code\n                              </a>{\" \"}\n                              <Icon name=\"popout\" />\n                            </li>\n                          ) : null}\n                          {application ? (\n                            <li>\n                              <a href={application} target=\"_blank\">\n                                BIFFUD Application\n                              </a>{\" \"}\n                              <Icon name=\"popout\" />\n                            </li>\n                          ) : null}\n                        </ul>\n                      </div>\n                    ) : null}\n                    {Object.keys(needs).length > 0 ? (\n                      <div className=\"sideB\" style={{ padding: \"0\" }}>\n                        <Label>Needs</Label>\n                        <ul>\n                          {Object.keys(needs).map(need => {\n                            const dict = {\n                              code: \"Code\",\n                              graphic: \"Graphic Design\",\n                              money: \"Money\",\n                              users: \"Users\",\n                              uxui: \"UX / UI Design\"\n                            };\n                            if (needs[need]) {\n                              return (\n                                <li key={needs[need]}>\n                                  {need !== \"other\" ? dict[need] : needs[need]}\n                                </li>\n                              );\n                            }\n                            return null;\n                          })}\n                        </ul>\n                      </div>\n                    ) : null}\n                  </Lists>\n                </div>\n              </BodyBd>\n              <BodyFt>\n                <Actionbar>\n                  {link ? (\n                    <div>\n                      <Action button primary href={link}>\n                        Launch project\n                      </Action>\n                    </div>\n                  ) : null}\n                  <div>\n                    <Action\n                      button={!link}\n                      href=\"https://patreon.com/biffud\"\n                      primary={!link}\n                      target=\"_blank\"\n                    >\n                      Donate to support\n                    </Action>\n                  </div>\n                </Actionbar>\n              </BodyFt>\n            </Tile>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nProjectItemTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query PortfolioItemsByUID($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        active\n        application\n        slides {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n        bifpresents\n        date(formatString: \"MMM YYYY\")\n        link\n        code\n        source\n        tagline\n        timeframe\n        title\n        uid\n        needs {\n          code\n          graphic\n          money\n          uxui\n          users\n          other\n        }\n        cover {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}