{"version":3,"sources":["webpack:///./lib/ui/templates/ProjectListingTpl.js"],"names":["Projects","styled","ol","breakpoint","tabletUp","desktopUp","Flag","span","setType","setSpace","theme","dimmedColor","Project","li","phone","ProjectCover","div","actionColor","hasPlaceholder","ProjectHd","titleColor","ProjectBd","ProjectFt","ProjectListingTpl","props","state","render","this","data","defaultCover","projects","markdownRemark","genericCover","edges","node","childImageSharp","frontmatter","title","className","heading","subheading","map","active","cover","date","code","tagline","uid","key","as","Link","to","fluid","alt","name","size","text","Component","pageQuery"],"mappings":"qTAWA,IAAMA,EAAWC,IAAOC,GAAV,kFAAGD,CAAH,iMACVE,IAAWC,SAOXD,IAAWE,WAKTC,EAAOL,IAAOM,KAAV,8EAAGN,CAAH,gEACNO,YAAQ,KACRC,YAAS,QACF,qBAAGC,MAAkBC,eAK1BC,EAAUX,IAAOY,GAAV,iFAAGZ,CAAH,qFAETE,IAAWW,MACTL,YAAS,OAEXN,IAAWC,UAOTW,EAAed,IAAOe,IAAV,sFAAGf,CAAH,oDACdQ,YAAS,QACS,qBAAGC,MAAkBO,eAEvC,gBAAGC,EAAH,EAAGA,eAAgBR,EAAnB,EAAmBA,MAAnB,OACAQ,EAAc,+BAGLR,EAAMO,YAHD,6LAgBZE,EAAYlB,IAAOe,IAAV,mFAAGf,CAAH,gMACXQ,YAAS,QAUA,qBAAGC,MAAkBU,cAIrB,qBAAGV,MAAkBC,eAI5BU,EAAYpB,IAAOe,IAAV,mFAAGf,CAAH,4MAMTO,YAAQ,MACD,qBAAGE,MAAkBO,cAU9Bd,IAAWE,WAOTiB,EAAYrB,IAAOe,IAAV,mFAAGf,CAAH,+BACJ,qBAAGS,MAAkBU,aAE1BX,YAAS,QAIMc,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,GAFI,E,0GAKnBC,OAAA,WAAU,IAAD,EAC4CC,KAAKH,MAAMI,KAAtDC,EADD,EACCA,aAAcC,EADf,EACeA,SAAUC,EADzB,EACyBA,eAC1BC,EAAeH,EAAaI,MAAM,GAAGC,KAAKC,gBACxCC,EAAgBL,EAAhBK,YACR,OACE,oCACE,kBAAC,IAAD,iBAAYT,KAAKH,MAAjB,CAAwBa,MAAOD,EAAYC,SAC3C,kBAAC,IAAWV,KAAKH,MACf,kBAAC,IAAD,KACE,wBAAIc,UAAU,QAAQF,EAAYG,SAClC,uBAAGD,UAAU,QAAQF,EAAYI,aAEnC,kBAAC,IAAD,KACE,kBAACxC,EAAD,KACG8B,EAASG,MAAMQ,KAAI,YAAe,IAAD,IAAXP,KASZE,YAPPM,EAF8B,EAE9BA,OACAC,EAH8B,EAG9BA,MACAC,EAJ8B,EAI9BA,KACAC,EAL8B,EAK9BA,KACAC,EAN8B,EAM9BA,QACAT,EAP8B,EAO9BA,MACAU,EAR8B,EAQ9BA,IAEF,OACE,kBAACnC,EAAD,CAASoC,IAAKD,EAAKE,GAAG,MACpB,kBAAC,IAAD,CAAMA,GAAIC,OAAMC,GAAE,aAAeJ,GAC/B,kBAAC5B,EAAD,KACE,0BAAMmB,UAAU,QACbO,EADH,IACWH,EAAqC,KAA5B,kBAACpC,EAAD,sBAEpB,0BAAMgC,UAAU,QAAQM,IAE1B,kBAAC7B,EAAD,CAAcG,gBAAiByB,GAC7B,kBAAC,IAAD,CACES,MACET,EACIA,EAAMR,gBAAgBiB,MACtBpB,EAAaoB,MAEnBC,IAAKhB,IAGLM,EAIE,KAHF,0BAAML,UAAU,YACd,kBAAC,IAAD,CAAMgB,KAAK,WAAWC,KAAK,QAIjC,kBAAClC,EAAD,KACE,wBAAIiB,UAAU,SAASD,GACvB,8BACE,kBAAC,IAAD,CAAMiB,KAAK,cAAcE,KAAK,iBAGlC,kBAAClC,EAAD,KACE,uBAAGgB,UAAU,WAAWQ,c,GA9DDW,aAmFlCC,EAAS","file":"component---lib-ui-templates-project-listing-tpl-js-e6fae9316bc98db9f58b.js","sourcesContent":["import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport Img from \"gatsby-image\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { breakpoint } from \"ui/settings\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst Projects = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 40px;\n    grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n  ${breakpoint.desktopUp} {\n    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\n  }\n`;\n\nconst Flag = styled.span`\n  ${setType(\"x\")};\n  ${setSpace(\"mlx\")};\n  color: ${({ theme }) => theme.dimmedColor};\n  font-weight: 800;\n  text-transform: uppercase;\n`;\n\nconst Project = styled.li`\n  grid-row-end: span 1;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n  ${breakpoint.tabletUp} {\n    &:nth-child(even) {\n      transform: translateY(30px);\n    }\n  }\n`;\n\nconst ProjectCover = styled.div`\n  ${setSpace(\"mbm\")};\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  position: relative;\n  ${({ hasPlaceholder, theme }) =>\n    hasPlaceholder\n      ? `\n  .thinking {\n    color: ${theme.actionColor};\n    display: inline-block;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    i {\n      font-size: 80px !important;\n    }\n  }`\n      : ``};\n`;\n\nconst ProjectHd = styled.div`\n  ${setSpace(\"mbm\")};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  span.code {\n    align-items: center;\n    color: ${({ theme }) => theme.titleColor};\n    display: flex;\n  }\n  span.date {\n    color: ${({ theme }) => theme.dimmedColor};\n  }\n`;\n\nconst ProjectBd = styled.div`\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n    text-transform: uppercase;\n  }\n  h2 {\n    max-width: 75%;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst ProjectFt = styled.div`\n  color: ${({ theme }) => theme.titleColor};\n  p.summary {\n    ${setSpace(\"mts\")};\n  }\n`;\n\nexport default class ProjectListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { defaultCover, projects, markdownRemark } = this.props.data;\n    const genericCover = defaultCover.edges[0].node.childImageSharp;\n    const { frontmatter } = markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <Projects>\n              {projects.edges.map(({ node }) => {\n                const {\n                  active,\n                  cover,\n                  date,\n                  code,\n                  tagline,\n                  title,\n                  uid\n                } = node.frontmatter;\n                return (\n                  <Project key={uid} as=\"li\">\n                    <Tile as={Link} to={`/projects/${uid}`}>\n                      <ProjectHd>\n                        <span className=\"code\">\n                          {code} {!active ? <Flag>(Hibernated)</Flag> : null}\n                        </span>\n                        <span className=\"date\">{date}</span>\n                      </ProjectHd>\n                      <ProjectCover hasPlaceholder={!cover}>\n                        <Img\n                          fluid={\n                            cover\n                              ? cover.childImageSharp.fluid\n                              : genericCover.fluid\n                          }\n                          alt={title}\n                        />\n\n                        {!cover ? (\n                          <span className=\"thinking\">\n                            <Icon name=\"thinking\" size=\"h\" />\n                          </span>\n                        ) : null}\n                      </ProjectCover>\n                      <ProjectBd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read moreâ€¦\" />\n                        </span>\n                      </ProjectBd>\n                      <ProjectFt>\n                        <p className=\"summary\">{tagline}</p>\n                      </ProjectFt>\n                    </Tile>\n                  </Project>\n                );\n              })}\n            </Projects>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nProjectListingTpl.propTypes = {\n  data: shape({\n    projects: object.isRequired,\n    markdownRemark: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query ProjectsTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    defaultCover: allFile(\n      filter: { relativePath: { eq: \"images/default-cover.png\" } }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(\n              maxWidth: 600\n              quality: 90\n              traceSVG: { color: \"lightgray\" }\n            ) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/projects/.*project.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___score, frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            uid\n            date(formatString: \"MMM YYYY\")\n            title\n            active\n            tagline\n            code\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 600\n                  quality: 90\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}