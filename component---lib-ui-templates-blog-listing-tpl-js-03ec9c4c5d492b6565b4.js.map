{"version":3,"sources":["webpack:///./lib/ui/templates/BlogListingTpl.js"],"names":["PostList","styled","ol","withConfig","displayName","componentId","breakpoint","tabletUp","Post","Tile","setType","phone","setSpace","PostCover","div","_ref","theme","actionColor","PostHd","_ref2","desktopUp","PostBd","_ref3","titleColor","PostFt","_ref4","color","BlogListingTpl","props","_this","_Component","call","this","state","render","posts","data","frontmatter","markdownRemark","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","Fragment","ui_partials__WEBPACK_IMPORTED_MODULE_9__","Object","assign","title","className","heading","subheading","edges","map","_ref5","node","timeToRead","_node$frontmatter","cover","date","summary","uid","key","as","ui_components__WEBPACK_IMPORTED_MODULE_7__","to","Link","gatsby_image__WEBPACK_IMPORTED_MODULE_5___default","fluid","childImageSharp","alt","name","text","Component","propTypes","shape","object","isRequired","pageQuery"],"mappings":"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","file":"component---lib-ui-templates-blog-listing-tpl-js-03ec9c4c5d492b6565b4.js","sourcesContent":["import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst PostList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Post = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst PostCover = styled.div`\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  ${setSpace(\"mbm\")};\n`;\n\nconst PostHd = styled.div`\n  ${setSpace(\"mbs\")};\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst PostBd = styled.div`\n  ${setSpace(\"mbm\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst PostFt = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    ${setType(\"s\")};\n    color: ${({ theme }) => theme.color};\n  }\n`;\n\nexport default class BlogListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { posts } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PostList>\n              {posts.edges.map(({ node }) => {\n                const { timeToRead } = node;\n                const { cover, date, summary, title, uid } = node.frontmatter;\n                return (\n                  <Post key={uid} as=\"li\">\n                    <Tile to={`/tldr/${uid}`} as={Link}>\n                      {cover ? (\n                        <PostCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </PostCover>\n                      ) : null}\n                      <PostHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read moreâ€¦\" />\n                        </span>\n                      </PostHd>\n                      <PostBd>\n                        <p className=\"summary\">{summary}</p>\n                      </PostBd>\n                      <PostFt>\n                        <span>{date}</span>\n                        <span>{timeToRead} min read</span>\n                      </PostFt>\n                    </Tile>\n                  </Post>\n                );\n              })}\n            </PostList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    posts: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/tldr/.*post.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            uid\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            date(formatString: \"MMMM D, YYYY\")\n            summary\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}