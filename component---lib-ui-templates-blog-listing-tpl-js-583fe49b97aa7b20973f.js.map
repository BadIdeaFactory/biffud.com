{"version":3,"sources":["webpack:///./lib/ui/templates/BlogListingTpl.js"],"names":["PostList","styled","ol","breakpoint","tabletUp","Post","Tile","setType","phone","setSpace","PostCover","div","theme","actionColor","PostHd","desktopUp","PostBd","titleColor","PostFt","color","BlogListingTpl","props","state","render","posts","this","data","frontmatter","markdownRemark","title","className","heading","subheading","edges","map","node","timeToRead","cover","date","summary","uid","key","as","to","Link","fluid","childImageSharp","alt","name","text","Component","pageQuery"],"mappings":"oTAWA,IAAMA,EAAWC,IAAOC,GAAV,+EAAGD,CAAH,kIACVE,IAAWC,UASTC,EAAOJ,YAAOK,KAAV,2EAAGL,CAAH,wDACNM,YAAQ,KAGRJ,IAAWK,MACTC,YAAS,QAITC,EAAYT,IAAOU,IAAV,gFAAGV,CAAH,+BACO,qBAAGW,MAAkBC,cACvCJ,YAAS,QAGPK,EAASb,IAAOU,IAAV,6EAAGV,CAAH,qKACRQ,YAAS,OAMPF,YAAQ,MACD,qBAAGK,MAAkBC,cAM9BV,IAAWY,WAOTC,EAASf,IAAOU,IAAV,6EAAGV,CAAH,iFACRQ,YAAS,QACF,qBAAGG,MAAkBK,cAM1BC,EAASjB,IAAOU,IAAV,6EAAGV,CAAH,uFAKNM,YAAQ,MACD,qBAAGK,MAAkBO,SAIbC,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,GAFI,E,0GAKnBC,OAAA,WAAU,IACAC,EAAUC,KAAKJ,MAAMK,KAArBF,MACAG,EAAgBF,KAAKJ,MAAMK,KAAKE,eAAhCD,YACR,OACE,oCACE,kBAAC,IAAD,iBAAYF,KAAKJ,MAAjB,CAAwBQ,MAAOF,EAAYE,SAC3C,kBAAC,IAAWJ,KAAKJ,MACf,kBAAC,IAAD,KACE,wBAAIS,UAAU,QAAQH,EAAYI,SAClC,uBAAGD,UAAU,QAAQH,EAAYK,aAEnC,kBAAC,IAAD,KACE,kBAAChC,EAAD,KACGwB,EAAMS,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACVC,EAAeD,EAAfC,WADqB,EAEgBD,EAAKR,YAA1CU,EAFqB,EAErBA,MAAOC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,QAASV,EAFD,EAECA,MAAOW,EAFR,EAEQA,IACrC,OACE,kBAACnC,EAAD,CAAMoC,IAAKD,EAAKE,GAAG,MACjB,kBAAC,IAAD,CAAMC,GAAE,SAAWH,EAAOE,GAAIE,QAC3BP,EACC,kBAAC3B,EAAD,KACE,kBAAC,IAAD,CACEmC,MAAOR,EAAMS,gBAAgBD,MAC7BE,IAAKlB,KAGP,KACJ,kBAACf,EAAD,KACE,wBAAIgB,UAAU,SAASD,GACvB,8BACE,kBAAC,IAAD,CAAMmB,KAAK,cAAcC,KAAK,iBAGlC,kBAACjC,EAAD,KACE,uBAAGc,UAAU,WAAWS,IAE1B,kBAACrB,EAAD,KACE,8BAAOoB,GACP,8BAAOF,EAAP,wB,GA5CoBc,aAiE/BC,EAAS","file":"component---lib-ui-templates-blog-listing-tpl-js-583fe49b97aa7b20973f.js","sourcesContent":["import { graphql, Link } from \"gatsby\";\nimport { object, shape } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Img from \"gatsby-image\";\nimport styled from \"styled-components\";\n\nimport { Icon, Tile } from \"ui/components\";\nimport { breakpoint } from \"ui/settings\";\nimport { Body, Header, Helmet, Layout } from \"ui/partials\";\nimport { setSpace, setType } from \"ui/mixins\";\n\nconst PostList = styled.ol`\n  ${breakpoint.tabletUp} {\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nconst Post = styled(Tile)`\n  ${setType(\"m\")};\n  grid-row-end: span 1;\n  position: relative;\n  ${breakpoint.phone} {\n    ${setSpace(\"mbl\")};\n  }\n`;\n\nconst PostCover = styled.div`\n  border: 2px solid ${({ theme }) => theme.actionColor};\n  ${setSpace(\"mbm\")};\n`;\n\nconst PostHd = styled.div`\n  ${setSpace(\"mbs\")};\n  align-items: flex-start;\n  display: flex;\n  justify-content: space-between;\n  h2,\n  span {\n    ${setType(\"l\")};\n    color: ${({ theme }) => theme.actionColor};\n    font-weight: 800;\n  }\n  span {\n    display: none;\n  }\n  ${breakpoint.desktopUp} {\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nconst PostBd = styled.div`\n  ${setSpace(\"mbm\")};\n  color: ${({ theme }) => theme.titleColor};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst PostFt = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  span {\n    ${setType(\"s\")};\n    color: ${({ theme }) => theme.color};\n  }\n`;\n\nexport default class BlogListingTpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { posts } = this.props.data;\n    const { frontmatter } = this.props.data.markdownRemark;\n    return (\n      <>\n        <Helmet {...this.props} title={frontmatter.title} />\n        <Layout {...this.props}>\n          <Header>\n            <h1 className=\"hero\">{frontmatter.heading}</h1>\n            <p className=\"para\">{frontmatter.subheading}</p>\n          </Header>\n          <Body>\n            <PostList>\n              {posts.edges.map(({ node }) => {\n                const { timeToRead } = node;\n                const { cover, date, summary, title, uid } = node.frontmatter;\n                return (\n                  <Post key={uid} as=\"li\">\n                    <Tile to={`/tldr/${uid}`} as={Link}>\n                      {cover ? (\n                        <PostCover>\n                          <Img\n                            fluid={cover.childImageSharp.fluid}\n                            alt={title}\n                          />\n                        </PostCover>\n                      ) : null}\n                      <PostHd>\n                        <h2 className=\"title\">{title}</h2>\n                        <span>\n                          <Icon name=\"arrow-right\" text=\"Read moreâ€¦\" />\n                        </span>\n                      </PostHd>\n                      <PostBd>\n                        <p className=\"summary\">{summary}</p>\n                      </PostBd>\n                      <PostFt>\n                        <span>{date}</span>\n                        <span>{timeToRead} min read</span>\n                      </PostFt>\n                    </Tile>\n                  </Post>\n                );\n              })}\n            </PostList>\n          </Body>\n        </Layout>\n      </>\n    );\n  }\n}\n\nBlogListingTpl.propTypes = {\n  data: shape({\n    markdownRemark: object.isRequired,\n    posts: object.isRequired\n  }).isRequired\n};\n\nexport const pageQuery = graphql`\n  query BlogTplQuery($uid: String!) {\n    markdownRemark(frontmatter: { uid: { eq: $uid } }) {\n      html\n      frontmatter {\n        uid\n        title\n        heading\n        subheading\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/pages/tldr/.*post.md/\" } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            uid\n            cover {\n              childImageSharp {\n                fluid(\n                  maxHeight: 240\n                  quality: 100\n                  traceSVG: { color: \"lightgray\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            date(formatString: \"MMMM D, YYYY\")\n            summary\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}